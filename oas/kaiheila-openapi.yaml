openapi: 3.1.0
servers:
  - url: "https://www.kaiheila.cn/api/v3"
    description: 机器人接口
info:
  description: 开黑啦机器人API v3
  version: 3.0.0
  title: Kaiheila API v3
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache-2.0
    url: "https://opensource.org/licenses/Apache-2.0"
tags:
  - name: user
    description: 用户相关接口
  - name: guild
    description: 服务器相关接口
  - name: asset
    description: 附件相关接口
  - name: channel
    description: 服务器频道相关接口
  - name: intimacy
    description: 亲密度相关接口列表
  - name: guild-emoji
    description: 服务器表情相关接口
  - name: invite
    description: 邀请相关接口
paths:

  /guild/list:
    get:
      tags:
        - guild
      summary: 获取当前用户加入的服务器列表
      description: ""
      operationId: guildList
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: sort
          in: query
          description: 代表排序的字段, 比如-id代表id按DESC排序，id代表id按ASC排序。不一定有, 如果有，接口中会声明支持的排序字段。
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/PaginationInfo"
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: "#/components/schemas/Guild"
  # /guild/index:
  #   get:
  #     summary: 获取当前用户加入的服务器列表
  #     description: ""
  #     parameters: []
  #     operationId: ""
  #     responses:
  #       "200":
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Guild"
  #     tags:
  #       - server
  /guild/view:
    get:
      tags:
        - guild
      summary: 获取服务器详情
      parameters:
        - $ref: "#/components/parameters/GuildIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Guild"
  /guild/user-list:
    get:
      tags:
        - guild
      summary: 获取服务器的用户列表
      parameters:
        - $ref: "#/components/parameters/GuildIdParam"
        - $ref: "#/components/parameters/GuildChannelIdParam"
          required: false
        - name: search
          in: query
          description: 搜索关键字，在用户名或昵称中搜索
          schema:
            type: string
        - name: role_id
          in: query
          description: 角色 ID，获取特定角色的用户列表
          schema:
            type: integer
        - $ref: "#/components/parameters/MobileVerifiedParam"
        - name: active_time
          in: query
          description: 根据活跃时间排序，`0`是顺序排列，`1`是倒序排列
          schema:
            type: integer
        - name: joined_at
          in: query
          description: 根据加入时间排序，`0`是顺序排列，`1`是倒序排列
          schema:
            type: integer
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: filter_user_id
          in: query
          description: 获取指定id所属用户的信息
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/PaginationInfo"
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: "#/components/schemas/User"
                              user_count:
                                type: integer
                                description: 用户数量
                                example: 10
                              online_count:
                                type: integer
                                description: 用户数量
                                example: 3
                              offline_count:
                                type: integer
                                description: 离线用户数量
                                example: 7
  /guild/nickname:
    post:
      tags:
        - guild
      summary: 修改服务器中的用户昵称
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref: "#/components/schemas/GuildId"
                nickname:
                  type: string
                  description: 昵称，2 - 64 长度，不传则清空昵称
                user_id:
                  allOf:
                    - $ref: "#/components/schemas/UserId"
                    - description: 要修改昵称的目标用户 ID，不传则修改当前登陆用户的昵称
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /guild/leave:
    post:
      tags:
        - guild
      summary: 离开服务器
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref: "#/components/schemas/GuildId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /guild/kickout:
    post:
      tags:
        - guild
      summary: 踢出服务器
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
              properties:
                guild_id:
                  $ref: "#/components/schemas/GuildId"
                target_id:
                  allOf:
                    - $ref: "#/components/schemas/UserId"
                    - description: 目标用户ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /guild-mute/list:
    get:
      tags:
        - guild
      summary: 服务器静音闭麦列表
      parameters:
        - $ref: "#/components/parameters/GuildIdParam"
        - name: return_type
          in: query
          description: 返回格式，建议为"detail", 其他情况仅作为兼容
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          mic:
                            description: return_type为detail时返回
                            type: object
                            properties:
                              type:
                                type: integer
                                description: 闭麦类型，1为麦克风闭麦
                                enum:
                                  - 1
                              user_ids:
                                type: array
                                items:
                                  $ref: "#/components/schemas/UserId"
                          headset:
                            description: return_type为detail时返回
                            type: object
                            properties:
                              type:
                                type: integer
                                description: 闭麦类型，2为耳机静音
                                enum:
                                  - 2
                              user_ids:
                                type: array
                                items:
                                  $ref: "#/components/schemas/UserId"
  /guild-mute/create:
    post:
      tags:
        - guild
      summary: 添加服务器闭麦或静音
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
                - type
              properties:
                guild_id:
                  $ref: "#/components/schemas/GuildId"
                target_id:
                  allOf:
                    - $ref: "#/components/schemas/UserId"
                    - description: 目标用户ID
                type:
                  type: integer
                  description: 静音类型，`1`代表麦克风闭麦，`2`代表耳机静音 # ISSUE: [RD-187] 用户静音/闭麦有联动，服务器静音/闭麦无联动，是否需要统一？
                  enum:
                    - 1
                    - 2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /guild-mute/delete:
    post:
      tags:
        - guild
      summary: 删除服务器闭麦或静音
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
                - type
              properties:
                guild_id:
                  $ref: "#/components/schemas/GuildId"
                target_id:
                  allOf:
                    - $ref: "#/components/schemas/UserId"
                    - description: 目标用户ID
                type:
                  type: integer
                  description: 静音类型，`1`代表麦克风闭麦，`2`代表耳机静音
                  enum:
                    - 1
                    - 2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /channel/list:
    get:
      tags:
        - channel
      summary: 获取频道列表
      parameters:
        - $ref: "#/components/parameters/GuildIdParam"
        - name: type
          in: query
          schema:
            $ref: "#/components/schemas/GuildChannelType"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/GuildChannel"
  /channel/view:
    get:
      tags:
        - channel
      summary: 获取频道详情
      parameters:
        - name: target_id
          required: true
          in: query
          schema:
            $ref: "#/components/schemas/GuildChannelId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/GuildChannel"
  /channel/create:
    post:
      tags:
        - channel
      summary: 创建频道
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - name
              properties:
                guild_id:
                  $ref: "#/components/schemas/GuildId"
                parent_id:
                  allOf:
                    - $ref: "#/components/schemas/GuildChannelId"
                    - description: 父分组id
                name:
                  type: string
                  description: 频道名称
                type:
                  allOf:
                    - $ref: "#/components/schemas/GuildChannelType"
                    - description: 频道类型, `1`为文字，`2`为语音, 默认为`1`
                limit_amount:
                  type: integer
                  maximum: 99
                  description: 语音频道人数限制，最大99
                voice_quality:
                  type: integer
                  description: 语音音质，默认为`2`。`1`流畅，`2`正常，`3`高质量
                  enum:
                    - 1
                    - 2
                    - 3
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/GuildChannel"
  /channel/delete:
    post:
      tags:
        - channel
      summary: 删除频道
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
              properties:
                channel_id:
                  $ref: "#/components/schemas/GuildChannelId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /channel/user-list:
    get:
      tags:
        - channel
      summary: 查询语音频道内用户
      description: 只能在语音频道之间移动，用户也必须在其他语音频道在线才能够移动到目标频道。
      parameters:
        - name: target_id
          required: true
          in: query
          description: 目标频道id, 需要是语音频道
          schema:
            $ref: "#/components/schemas/GuildChannelId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_ids:
                            type: array
                            description: 用户id的数组
                            items:
                              $ref: "#/components/schemas/UserId"
  /channel/move-user:
    post:
      tags:
        - channel
      summary: 语音频道之间移动用户
      description: 只能在语音频道之间移动，用户也必须在其他语音频道在线才能够移动到目标频道。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
                - user_ids
              properties:
                channel_id:
                  allOf:
                    - $ref: "#/components/schemas/GuildChannelId"
                    - description: 目标频道id, 需要是语音频道
                user_ids:
                  type: array
                  description: 用户id的数组
                  items:
                    $ref: "#/components/schemas/UserId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_ids:
                            type: array
                            description: 用户id的数组
                            items:
                              $ref: "#/components/schemas/UserId"
  /channel-role/index:
    get:
      tags:
        - channel
      summary: 频道角色权限详情
      parameters:
        - $ref: "#/components/parameters/GuildChannelIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          permission_overwrites:
                            type: array
                            description: 频道权限覆写的角色列表, role_id为角色id, 其它字段见下表
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    role_id:
                                      type: string
                                - $ref: "#/components/schemas/GuildChannelPermission"
                          permission_users:
                            type: array
                            description: 频道权限覆写的用户列表
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    user:
                                      $ref: "#/components/schemas/User"
                                - $ref: "#/components/schemas/GuildChannelPermission"
                          permission_sync:
                            type: integer
                            description: 是否同步分组的权限
                            example: 0
  /channel-role/create:
    post:
      tags:
        - channel
      summary: 创建频道角色权限
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
              properties:
                channel_id:
                  allOf:
                    - $ref: "#/components/schemas/GuildChannelId"
                    - description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道
                type:
                  type: string
                  description: value的类型，只能为"role_id","user_id",不传则默认为"user_id"
                  enum:
                    - role_id
                    - user_id
                  default: user_id
                value:
                  type: string
                  description: 根据type，为用户id或频道id
                  default: 0

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: {} # TODO: 返回新增数据
  /channel-role/update:
    post:
      tags:
        - channel
      summary: 更新频道角色权限
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
              properties:
                channel_id:
                  allOf:
                    - $ref: "#/components/schemas/GuildChannelId"
                    - description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道
                type:
                  type: string
                  description: value的类型，只能为"role_id","user_id",不传则默认为"user_id"
                  enum:
                    - role_id
                    - user_id
                  default: user_id
                value:
                  type: string
                  description: 根据type，为用户id或频道id
                  default: 0
                allow:
                  type: integer
                  description: 默认为0,想要设置的允许的权限值
                  default: 0
                deny:
                  type: integer
                  description: 默认为0,想要设置的拒绝的权限值
                  default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: { user_id: "2418200000", allow: 2048, deny: 0 }
                        allOf:
                          - type: object
                            properties:
                              user_id:
                                $ref: "#/components/schemas/UserId"
                              role_id:
                                $ref: "#/components/schemas/GuildRoleId"
                          - $ref: "#/components/schemas/GuildChannelPermission"
  /channel-role/delete:
    post:
      tags:
        - channel
      summary: 删除频道角色权限
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
              properties:
                channel_id:
                  allOf:
                    - $ref: "#/components/schemas/GuildChannelId"
                    - description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道
                type:
                  type: string
                  description: value的类型，只能为"role_id","user_id",不传则默认为"user_id"
                  enum:
                    - role_id
                    - user_id
                  default: user_id
                value:
                  type: string
                  description: 根据type，为用户id或频道id
                  default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: {}

  /message/list:
    get:
      tags:
        - message
      summary: 获取频道聊天消息列表
      description: 此接口非标准分页，需要根据参考消息来查询相邻分页的消息
      parameters:
        - name: target_id
          in: query
          description: 频道id
          required: true
          schema:
            $ref: "#/components/schemas/GuildChannelId"
        - name: msg_id
          in: query
          description: 参考消息id，不传则查询最新消息
          schema:
            type: string
        - name: pin
          in: query
          description: 只能为0或者1，是否查询置顶消息。 置顶消息只支持查询最新的消息
          schema:
            type: integer
            format: unsigned integer
            enum:
              - 0
              - 1
        - $ref: "#/components/parameters/MessageListFlagParam"
        - name: page_size
          in: query
          description: 当前分页消息数量, 默认50
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Message"
  /message/create:
    post:
      tags:
        - message
      summary: 发送频道聊天消息
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/SendMessageRequest"
                - type: object
                  required:
                    - target_id
                  properties:
                    target_id:
                      allOf:
                        - $ref: "#/components/schemas/GuildChannelId"
                      description: 目标频道 id
                    temp_target_id:
                      type: string
                      description: 用户id,如果传了，代表该消息是临时消息，该消息不会存数据库，但是会在频道内只给该用户推送临时消息。用于在频道内针对用户的操作进行单独的回应通知等。
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  data:
                    properties:
                      msg_id:
                        type: string
                        description: 服务端生成的消息 id
                        example:
                      msg_timestamp:
                        type: integer
                        description: 消息发送时间(ms, 服务器时间戳)
                        example: 1607072537177
                      nonce:
                        type: string
                        description: 原样返回的字符串
                        example: "xxxx"
  /message/update:
    post:
      tags:
        - message
      summary: 更新频道聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: "#/components/schemas/MessageId"
                content:
                  type: string
                  description: 消息内容
                quote:
                  allOf:
                    - $ref: "#/components/schemas/MessageId"
                  description: 回复某条消息的`msgId`。如果为空，则代表删除回复，不传则无影响。
                temp_target_id:
                  type: string
                  description: 用户id，针对特定用户临时更新消息，必须是正常消息才能更新。与发送临时消息概念不同，但同样不保存数据库。
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /message/delete:
    post:
      tags:
        - message
      summary: 删除频道聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: "#/components/schemas/MessageId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /message/reaction-list:
    get:
      tags:
        - message
      summary: 获取频道消息某个回应的用户列表
      parameters:
        - name: msg_id
          in: query
          description: 频道消息的id
          required: true
          schema:
            $ref: "#/components/schemas/MessageId"
        - name: emoji
          in: query
          description: emoji的id, 可以为GuildEmoji或者Emoji, 注意：在get中，应该进行urlencode
          schema:
            $ref: "#/components/schemas/GuildEmojiId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref:  "#/components/schemas/User"
                            - type: object
                              properties:
                                reaction_time:
                                  type: integer
                                  description: 用户点击reaction的毫秒时间戳
  /message/add-reaction:
    post:
      tags:
        - message
      summary: 为消息添加回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: "#/components/schemas/MessageId"
                emoji:
                  $ref: "#/components/schemas/GuildEmojiId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

  /message/delete-reaction:
    post:
      tags:
        - message
      summary: 为消息删除回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: "#/components/schemas/MessageId"
                emoji:
                  $ref: "#/components/schemas/GuildEmojiId"
                user_id:
                  allOf:
                    - $ref: "#/components/schemas/UserId"
                    - description: 用户的id, 如果不填则为自己的id。删除别人的reaction需要有管理频道消息的权限
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /user-chat/list:
    get:
      tags:
        - user-chat
      parameters:
        - 
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserChat"
  /user-chat/view:
    get:
      tags:
        - user-chat
      parameters:
        - name: chat_code
          in: query
          description: 私聊会话 Code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserChatDetail"
  /user-chat/create:
    post:
      tags:
        - user-chat
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  target_id:
                    allOf:
                      - $ref: "#/components/schemas/UserId"
                    description: 目标用户id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserChatDetail"
  /user-chat/delete:
    post:
      tags:
        - user-chat
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  target_id:
                    allOf:
                      - $ref: "#/components/schemas/UserId"
                    description: 目标用户id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

  /direct-message/list:
    get:
      tags:
        - direct-message
      parameters:
        - name: chat_code
          in: query
          description: 私信会话 Code。`chat_code`与`target_id`必须传一个
          schema:
            type: string
        - name: target_id
          description: 目标用户 id，后端会自动创建会话。有此参数之后可不传`chat_code`参数
          in: query
          schema:
            $ref: "#/components/schemas/UserId"
        - name: msg_id
          description: 参考消息 id，不传则查询最新消息
          in: query
          schema:
            $ref: "#/components/schemas/MessageId"
        - $ref: "#/components/parameters/MessageListFlagParam"
        - name: page_size
          in: query
          description: 当前分页消息数量, 默认50
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/DirectMessage"
  /direct-message/create:
    post:
      tags:
        - direct-message
      summary: 发送私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/SendMessageRequest"
              type: object
              properties:
                target_id:
                  allOf:
                    - $ref: "#/components/schemas/UserId"
                  description: 目标用户 id，后端会自动创建会话。有此参数之后可不传`chat_code`参数
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  data:
                    properties:
                      msg_id:
                        type: string
                        description: 服务端生成的消息 id
                        example: 50974c-364c983fa6cb
                      msg_timestamp:
                        type: integer
                        description: 消息发送时间(ms, 服务器时间戳)
                        example: 1607072537177
                      nonce:
                        type: string
                        description: 原样返回的字符串
                        example: "xxxx"
  /direct-message/update:
    post:
      tags:
        - direct-message
      summary: 更新私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: "#/components/schemas/MessageId"
                content:
                  type: string
                  description: 消息内容
                quote:
                  allOf:
                    - $ref: "#/components/schemas/MessageId"
                  description: 回复某条消息的`msgId`。如果为空，则代表删除回复，不传则无影响。
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /direct-message/delete:
    post:
      tags:
        - direct-message
      summary: 删除私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: "#/components/schemas/MessageId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

  /direct-message/reaction-list:
    get:
      tags:
        - direct-message
      summary: 获取消息某个回应的用户列表
      parameters:
        - name: msg_id
          in: query
          description: 消息的id
          required: true
          schema:
            $ref: "#/components/schemas/MessageId"
        - name: emoji
          in: query
          description: emoji的id, 可以为GuildEmoji或者Emoji, 注意：在get中，应该进行urlencode
          schema:
            $ref: "#/components/schemas/GuildEmojiId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref:  "#/components/schemas/User"
                            - type: object
                              properties:
                                reaction_time:
                                  type: integer
                                  description: 用户点击reaction的毫秒时间戳
  /direct-message/add-reaction:
    post:
      tags:
        - direct-message
      summary: 为消息添加回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: "#/components/schemas/MessageId"
                emoji:
                  $ref: "#/components/schemas/GuildEmojiId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

  /direct-message/delete-reaction:
    post:
      tags:
        - message
      summary: 为消息删除回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: "#/components/schemas/MessageId"
                emoji:
                  $ref: "#/components/schemas/GuildEmojiId"
                user_id:
                  allOf:
                    - $ref: "#/components/schemas/UserId"
                    - description: 用户的id, 如果不填则为自己的id。删除别人的reaction需要有管理频道消息的权限
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
  /gateway/index:
    get:
      tags:
        - gateway
      parameters:
        - 
      responses:
        "200":
          description: OK
        # TODO

  /user/me:
    get:
      tags:
        - user
      summary: 获取当前用户信息
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref:  "#/components/schemas/User"
                          - type: object
                            properties:
                              mobile_verified:
                                type: boolean
                                description: 手机号是否已验证
                                example: true
                              mobile_prefix:
                                type: string
                                description: 手机区号,如中国为86
                                example: 86
                              mobile:
                                type: string
                                description: 用户手机号，带掩码
                                example: 110****2333
                              invited_count:
                                type: integer
                                description: 当前邀请注册的人数
                                example: 3

  /user/view:
    get:
      tags:
        - user
      summary: 获取目标用户信息
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - name: guild_id
          in: query
          description: 服务器id
          schema:
            $ref: "#/components/schemas/GuildId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref:  "#/components/schemas/User"
                          - type: object
                            properties:
                              mobile_verified:
                                type: boolean
                                description: 手机号是否已验证
                                example: true
                              roles:
                                type: array
                                description: 用户在当前服务器中的角色 id 组成的列表
                                items:
                                  $ref:  "#/components/schemas/GuildRoleId"
                              joined_at:
                                type: integer
                                description: 加入服务器时间
                                example: 1621338425000
                              active_time:
                                type: integer
                                description: 活跃时间
                                example: 1628688607719
  /asset/create:
    post:
      tags:
        - asset
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                            description: 资源url
                            example: "https://img.kaiheila.cn/attachments/2021-01/18/xxxxxxxxx.txt"

  /guild-role/list:
    get:
      tags:
        - guild-role
      summary: 获取服务器角色列表
      parameters:
        - $ref: "#/components/parameters/GuildIdParam" 
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/PaginationInfo"
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  $ref:  "#/components/schemas/GuildRole"

  /guild-role/create:
    post:
      tags:
        - guild-role
      summary: 创建服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref:  "#/components/schemas/GuildId"
                name:
                  type: string
                  description: 如果不写，则为"新角色"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref:  "#/components/schemas/GuildRole"

  /guild-role/update:
    post:
      tags:
        - guild-role
      summary: 更新服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - role_id
              properties:
                guild_id:
                  $ref:  "#/components/schemas/GuildId"
                role_id:
                  type: integer
                  format: unsigned integer
                  description: 角色id
                  example: 702
                name:
                  type: string
                  description: 角色名称
                  example: 管理员
                color:
                  type: integer
                  format: unsigned integer
                  minimum: 0x000000
                  maximum: 0xFFFFFF
                  description: 颜色
                  example: 0
                hoist:
                  type: integer
                  format: unsigned integer
                  description: 只能为0或者1，是否把该角色的用户在用户列表排到前面
                  enum:
                    - 0
                    - 1
                mentionable:
                  type: integer
                  format: unsigned integer
                  description: 只能为0或者1，该角色是否可以被提及
                  enum:
                    - 0
                    - 1
                permissions:
                  type: integer
                  format: unsigned integer
                  description: 权限,参见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)
                  example: 2048
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref:  "#/components/schemas/GuildRole"

  /guild-role/delete:
    post:
      tags:
        - guild-role
      summary: 删除服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - role_id
              properties:
                guild_id:
                  $ref:  "#/components/schemas/GuildId"
                role_id:
                  type: integer
                  format: unsigned integer
                  description: 角色id
                  example: 702
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"

  /guild-role/grant:
    post:
      tags:
        - guild-role
      summary: 赋予用户角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - user_id
                - role_id
              properties:
                guild_id:
                  $ref:  "#/components/schemas/GuildId"
                user_id:
                  $ref:  "#/components/schemas/UserId"
                role_id:
                  $ref:  "#/components/schemas/GuildRoleId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            $ref:  "#/components/schemas/UserId"
                          guild_id:
                            $ref:  "#/components/schemas/GuildId"
                          roles:
                            type: array
                            description: 角色id的列表
                            items:
                              $ref:  "#/components/schemas/GuildRoleId"

  /guild-role/revoke:
    post:
      tags:
        - guild-role
      summary: 删除用户角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - user_id
                - role_id
              properties:
                guild_id:
                  $ref:  "#/components/schemas/GuildId"
                user_id:
                  $ref:  "#/components/schemas/UserId"
                role_id:
                  $ref:  "#/components/schemas/GuildRoleId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            $ref:  "#/components/schemas/UserId"
                          guild_id:
                            $ref:  "#/components/schemas/GuildId"
                          roles:
                            type: array
                            description: 角色id的列表
                            items:
                              $ref:  "#/components/schemas/GuildRoleId"

  /intimacy/index:
    get:
      tags:
        - intimacy
      summary: 获取用户的亲密度
      description: 机器人可以在后台配置默认的初始亲密度和形象，当用户触发某些事件时，机器人可以根据一些逻辑来更新与该用户的亲密度以及形象展示。
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          img_url:
                            type: string
                            description: 机器人给用户显示的形象图片地址
                          social_info:
                            type: string
                            description: 机器人显示给用户的社交信息
                            example: test
                          last_read:
                            type: integer
                            description: 用户上次查看的时间戳
                            example: 0
                          img_list:
                            type: array
                            description: 形象图片的总列表
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  description: 形象图片的 id
                                  example: 11
                                url:
                                  type: string
                                  description: 形象图片的地址
                                  example: ""

  /intimacy/update:
    post:
      tags:
        - intimacy
      summary: 更新用户亲密度
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  $ref: "#/components/schemas/UserId"
                score:
                  type: integer
                  description: 亲密度，0-2200
                  example: 123
                social_info:
                  type: string
                  description: 机器人与用户的社交信息，500 字以内
                  example: test
                img_id:
                  type: string
                  description: 表情 ID
                  example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"

  /guild-emoji/list:
    get:
      tags:
        - guild-emoji
      summary: 获取服务器表情列表
      parameters:
        - $ref: "#/components/parameters/GuildIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/PaginationInfo"
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  $ref: "#/components/schemas/GuildEmoji"
  /guild-emoji/create:
    post:
      tags:
        - guild-emoji
      summary: 创建服务器表情
      description: Header 中 Content-Type 必须为 multipart/form-data
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - guild_id
                - emoji
              properties:
                name:
                  type: string
                  description: 表情名。长度限制 2 - 32 字符，如果不写，则为随机字符串
                guild_id:
                  $ref: "#/components/schemas/GuildId"
                emoji:
                  type: string
                  format: binary
                  description: 表情文件。必须为 PNG 类型，大小不能超过 256 KB
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/GuildEmoji"

  /guild-emoji/update:
    post:
      tags:
        - guild-emoji
      summary: 更新服务器表情
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - id
              properties:
                name:
                  type: string
                  description: 表情名。长度限制 2 - 32 字符，如果不写，则为随机字符串
                id:
                  type: string
                  description: 表情 ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"

  /guild-emoji/delete:
    post:
      tags:
        - guild-emoji
      summary: 删除服务器表情
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: 表情 ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"

  /invite/list:
    get:
      tags:
        - invite
      summary: 获取邀请列表
      description: 服务器id或者频道id必须填一个
      parameters:
        - name: guild_id
          in: query
          description: 服务器id
          required: false
          schema:
            $ref: "#/components/schemas/GuildId"
        - $ref: "#/components/parameters/GuildChannelIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/PaginationInfo"
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    channel_id:
                                      $ref: "#/components/schemas/GuildChannelId"
                                    guild_id:
                                      $ref: "#/components/schemas/GuildId"
                                    url_code:
                                      type: string
                                      description: 邀请码
                                      example: XXX
                                    url:
                                      type: string
                                      description: 邀请链接
                                      example: https://kaihei.co/XXX
                                    user:
                                      $ref: "#/components/schemas/User"
  /invite/create:
    post:
      tags:
        - invite
      summary: 创建邀请链接
      description: 服务器id或者频道id必须填一个
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                guild_id:
                  $ref: "#/components/schemas/GuildId"
                channel_id:
                  $ref: "#/components/schemas/GuildChannelId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                            description: 邀请链接
                            example: "https://kaihei.co/xxxx"

  /invite/delete:
    post:
      tags:
        - invite
      summary: 删除邀请链接
      description: 服务器id或者频道id必须填一个
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "url_code"
              properties:
                url_code:
                  type: string
                  example: XXX
                guild_id:
                  $ref: "#/components/schemas/GuildId"
                channel_id:
                  $ref: "#/components/schemas/GuildChannelId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                            description: 邀请链接
                            example: "https://kaihei.co/xxxx"
# webhooks:
#   newMessage:
#     post:
#       tags:
#         - events
#       requestBody:  # 事件待补充
#         description: 新消息
#         content: 
#           application/json: 
#             schema: 
#               $ref: 
#       responses:
#         "200":
#           description: OK

components:
  schemas:
    BasicResponse:
      type: object
      required:
        - message
        - code
      properties:
        code:
          type: integer
          description: 错误码，0代表成功，非0代表失败，具体的错误码参见错误码一览
          example: 0
        message:
          type: string
          description: 错误消息，具体的返回消息会根据Accept-Language来返回。
          example: 操作成功
        data:
          type: object
          description: 返回数据
    PaginationInfo:
      type: object
      properties:
        items:
          type: array
          description: 数据列表
          items:
            type: object
        meta:
          type: object
          description: 分页信息
          properties:
            page:
              type: integer
              description: 页码
              example: 1
            page_total:
              type: integer
              description: 总页数
              example: 10
            page_size:
              type: integer
              description: 每一页的数据
              example: 50
            total:
              type: integer
              description: 总数据量
              example: 480
        sort:
          type: object
          description: "Map。分页的排序, key:+-1, 如果为1代表按key升序，如果为-1代表按key降序"
          example:
            id: 1
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
          xml:
            name: Category
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: Tag
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    UserChat:
      type: object
      properties:
        code:
          type: string
          description: 私信会话 Code
          example: sderwrw**
        last_read_time:
          type: integer
          description: 上次阅读消息的时间 (毫秒)
          example: 1612696873000
        latest_msg_time:
          type: integer
          description: 最新消息时间 (毫秒)
          example: 
        unread_count:
          type: integer
          description: 未读消息数
        target_info:
          type: object
          description: 目标用户信息
          properties:
            id:
              $ref: "#/components/schemas/UserId"
            username:
              type: string
              description: 目标用户名
              example: "工具"
            online:
              type: boolean
              description: 是否在线
              example: false
            avatar:
              type: string
              description: 头像图片链接
              example: "https://***.jpg"
    UserChatDetail:
      allOf:
        - $ref: "#/components/schemas/UserChat"
        - type: object
          properties:
            is_friend:
              type: boolean
              description: 是否是好友
            is_blocked:
              type: boolean
              description: 是否已屏蔽对方
            is_target_blocked:
              type: boolean
              description: 是否已被对方屏蔽
    GuildChannelType:
      type: integer
      enum:
        - 1
        - 2
      description: 频道类型，1为文字频道，2为语音频道
    GuildChannelId:
      type: string
      description: 服务器频道ID
      example: "00000000000000000000000"
    GuildChannelPermission:
      type: object
      required:
        - allow
        - deny
      properties:
        allow:
          type: integer
          description: 允许的权限的结果集
          example: 2048
        deny:
          type: integer
          description: 拒绝的权限的结果集
          example: 0
    GuildChannel:
      type: object
      description: 服务器频道
      properties:
        id:
          $ref: "#/components/schemas/GuildChannelId"
        guild_id:
          $ref: "#/components/schemas/GuildId"
        master_id:
          description: 频道创建者id
          type: string
        parent_id:
          type: string
          description: 父分组频道id
        name:
          type: string
          description: 频道名称
        topic:
          type: string
          description: 频道简介
        type:
          $ref: "#/components/schemas/GuildChannelType"
        level:
          type: integer
          description: 频道排序
        slow_mode:
          type: integer
          description: 慢速限制，单位秒。用户发送消息之后再次发送消息的等待时间。
        limit_amount:
          type: integer
          description: 人数限制
        is_category:
          type: boolean
          description: 是否为分组类型
        server_url:
          type: string
          description: 语音服务器地址，`HOST:PORT`的格式
      example:
        id: 123
        guild_id: 123
        master_id: 123
        parent_id: 123
        name: 测试频道
        topic: 频道简介
        type: 1
        level: 10
        slow_mode: 0
        is_category: false
    GuildId:
      type: string
      description: 服务器id
      example: "91686000000"
    GuildRoleId:
      type: number
      description: 服务器角色id
      example: 113
    Guild:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/GuildId"
        name:
          type: string
          description: 服务器名称
          example: "Hello"
        topic:
          type: string
          description: 服务器主题
        master_id:
          type: string
          description: 服务器主的id
          example: "17000000"
        icon:
          type: string
          description: 服务器icon的地址
        notify_type:
          type: integer
          description: "通知类型, `0`代表默认使用服务器通知设置，`1`代表接收所有通知, `2`代表仅@被提及，`3`代表不接收通知"
          enum:
            - 0
            - 1
            - 2
            - 3
        region:
          type: string
          description: 服务器默认使用语音区域
        enable_open:
          type: boolean
          description: 是否为公开服务器
        open_id:
          type: string
          description: 公开服务器id
        default_channel_id:
          type: string
          description: 默认频道id
        welcome_channel_id:
          type: string
          description: 欢迎频道id
      example:
        id: 123123
        name: test server
        topic: ""
        master_id: ""
        icon: ""
        notify_type: 0
        region: beijing
    GuildEmojiId:
      type: string
      description: 表情的 ID
      example: XXXXXXXXX/4c43XXXXXXX
    GuildEmoji:
      type: object
      properties:
        name:
          type: string
          description: 表情的名称
          example: 摇滚啊
        id:
          $ref: "#/components/schemas/GuildEmojiId"
        user_info:
          description: 上传用户
          allOf:
            - $ref: "#/components/schemas/User"
    UserId:
      type: string
      description: 用户id
      example: "2418200000"
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        username:
          type: string
          description: 用户的名称
          example: "tz-un"
        identify_num:
          type: string
          description: 用户名的认证数字，用户名正常为：user_name#identify_num
          example: "5618"
        online:
          type: boolean
          description: 当前是否在线
          example: false
        status:
          type: integer
          description: 用户的状态, 0代表正常，10代表被封禁
          enum:
            - 0
            - 10
          example: 0
        bot:
          type: boolean
          description: 是否为机器人
        avatar:
          type: string
          description: 用户的头像的url地址
          example: "https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon"
        vip_avatar:
          type: string
          description: vip用户的头像的url地址，可能为gif动图
          example: "https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon"
    GuildUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            nickname:
              type: string
              description: 用户在当前服务器的昵称
            mobile_verified:
              type: boolean
              description: 是否手机号已验证
              example: true
            roles:
              description: 用户在当前服务器中的角色id组成的列表
              type: array
              items:
                type: number
              example: [111, 112]
          example:
            id: "2418200000"
            username: "tz-un"
            identify_num: "5618"
            online: false
            avatar: "https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon"
            vip_avatar: "https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon"
            bot: false
            status: 0
            mobile_verified: true
            nickname: "12316993"
            roles: [111, 112]
    SendMessageRequest:
      type: object
      required:
        - content
      properties:
        type:
          type: integer
          description: 消息类型, 见[type], 不传默认为`1`, 代表文本类型。`2`图片消息，`3`视频消息，`4`文件消息，`9`代表 kmarkdown 消息, `10`代表卡片消息。
          example: 1
        content:
          type: string
          description: 消息内容
        quote:
          allOf:
            - $ref: "#/components/schemas/MessageId"
          description: 回复某条消息的`msgId`
        nonce:
          type: string
          description: nonce, 服务端不做处理, 原样返回
    MessageId:
      type: string
      description: 消息id
      example: "1c4532f6-*********-93e9-6347f410f91c"
    MessageEmbed:
      type: object
      properties:
        type:
          type: string
        url:
          type: string
      additionalProperties: true
      example:
        {
          "type": "bili-video",
          "url": "",
          "origin_url": "https://www.bilibili.com/video/XXXXX",
          "av_no": "11J411E",
          "iframe_path": "https://player.bilibili.com/player.html?xxx=xxx",
          "duration": 97,
          "title": "Title",
          "pic": "https://**/lc01gi.jpg",
        }
    MessageReaction:
      type: object
      properties:
        emoji:
          type: object
          properties:
            id:
              type: string
              example: "[#129315;]"
            name:
              type: string
              example: "[#129315;]"
        count:
          type: integer
        me:
          type: boolean
    MessageMentionInfoPart:
      type: object
      properties:
        id:
          type: string
          example: 28444
        username:
          type: string
          example: "example"
        full_name:
          type: string
          example: "example#1111"
        avatar:
          type: string
          example: "***.jpg"
    MessageAttachments:
      oneOf:
        - $ref: "#/components/schemas/MessageAttachmentFile"
    MessageAttachmentFile:
      type: object
      properties:
        type:
          type: string
          enum:
            - file
        url:
          type: string
        name:
          type: string
          description: 多媒体名
        size:
          type: integer
          description: 大小 单位（B）
          example: 2575670
    MessageQuote:
      type: object
      properties:
        id:
          type: string
          description: 引用消息id
          example: "1c4532f6-*********-93e9-6347f410f91c"
        type:
          type: integer
          description: 引用消息类型
          example: 1
        content:
          type: string
          description: 引用消息内容
          example: "hello world"
        create_at:
          type: integer
          description: 引用消息创建时间（毫秒）
          example: 1628069285358
        author:
          description: 作者的用户信息
          allOf:
            - $ref: "#/components/schemas/User"
    Message:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MessageId"
        type:
          type: integer
          description: 消息类型
        author:
          description: 消息作者
          allOf:
            - $ref: "#/components/schemas/User"
        content:
          type: string
          description: 消息内容
        mention:
          type: array
          description: >-
            `\@特定用户` 的用户ID数组，与`mention_info`中的数据对应
          items:
            type: string
        mention_all:
          type: boolean
          description: 是否含有`@全体人员`
        mention_roles:
          type: array
          description: >-
            `@特定角色` 的角色ID数组，与`mention_info`中的数据对应
          items:
            type: string
        mention_here:
          type: boolean
        embeds:
          type: array
          description: 超链接解析数据
          items:
            $ref: "#/components/schemas/MessageEmbed"
        attachments:
          $ref: "#/components/schemas/MessageAttachments"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/MessageReaction"
        quote:
          $ref: "#/components/schemas/MessageQuote"
        mention_info:
          type: object
          properties:
            mention_part:
              type: array
              items:
                $ref: "#/components/schemas/MessageMentionInfoPart"
            mention_role_part:
              type: array
              items:
                $ref: "#/components/schemas/GuildRole"
    DirectMessage:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MessageId"
        type:
          type: integer
          description: 消息类型
        author_id:
          description: 作者的用户ID
          allOf:
            - $ref: "#/components/schemas/UserId"
        content:
          type: string
          description: 消息内容
        embeds:
          type: array
          description: 超链接解析数据
          items:
            $ref: "#/components/schemas/MessageEmbed"
        attachments:
          type: object
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/MessageReaction"
        quote:
          $ref: "#/components/schemas/MessageQuote"
        read_status:
          type: boolean
          description: 是否已读
    GuildRole:
      type: object
      properties:
        role_id:
          type: integer
          format: unsigned integer
          description: 角色id
          example: 702
        name:
          type: string
          description: 角色名称
          example: 管理员
        color:
          type: integer
          format: unsigned integer
          minimum: 0x000000
          maximum: 0xFFFFFF
          description: 颜色
          example: 0
        position:
          type: integer
          format: unsigned integer
          description: 顺序，值越小载靠前
          example: 1
        hoist:
          type: integer
          format: unsigned integer
          description: 只能为0或者1，是否把该角色的用户在用户列表排到前面
          enum:
            - 0
            - 1
        mentionable:
          type: integer
          format: unsigned integer
          description: 只能为0或者1，该角色是否可以被提及
          enum:
            - 0
            - 1
        permissions:
          type: integer
          format: unsigned integer
          description: 权限,参见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)
          example: 2048
    
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                xml:
                  name: Category
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                  xml:
                    name: Tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
        application/xml:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                xml:
                  name: Category
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                  xml:
                    name: Tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                username:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
                userStatus:
                  type: integer
                  format: int32
                  description: User Status
              xml:
                name: User
      description: List of user object
      required: true
  securitySchemes:
    Token:
      type: apiKey
      in: header
      name: Authorization
      description: Enter your token in the format **Token &lt;token>**
  parameters:
    UserIdParam:
      name: user_id
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/UserId"
    GuildIdParam:
      name: guild_id
      in: query
      description: 服务器id
      required: true
      schema:
        $ref: "#/components/schemas/GuildId"
    MessageListFlagParam:
      name: flag
      in: query
      description: >-
        查询模式，有三种模式可以选择。不传则默认查询最新的消息。  

        before: 查询参考消息之前的消息，不包括参考消息  

        around: 查询以参考消息为中心，前后一定数量的消息  

        after: 查询参考消息之后的消息，不包括参考消息
      schema:
        type: string
        enum:
          - before
          - around
          - after
    GuildChannelTypeParam:
      name: type
      in: query
      description: 频道类型, `1`为文字，`2`为语音, 默认为`1`
      schema:
        $ref: "#/components/schemas/GuildChannelType"
    GuildChannelIdParam:
      name: channel_id
      in: query
      description: 频道id
      schema:
        $ref: "#/components/schemas/GuildChannelId"
    VoiceQualityParam:
      name: voice_quality
      in: query
      description: 语音音质，默认为`2`。`1`流畅，`2`正常，`3`高质量
      schema:
        type: integer
        enum:
          - 1
          - 2
          - 3
    MobileVerifiedParam:
      name: mobile_verified
      in: query
      description: 只能为`0`或`1`，`0`是未认证，`1`是已认证
      schema:
        type: integer
        enum:
          - 0
          - 1
    PageNumberParam:
      name: page
      in: query
      description: 目标页数
      schema:
        type: integer
    PageSizeParam:
      name: page_size
      in: query
      description: 每页数据数量
      schema:
        type: integer

  links: {}
  callbacks: {}
security:
  - Token: []
