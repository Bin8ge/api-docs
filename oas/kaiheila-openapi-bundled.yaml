openapi: 3.1.0
servers:
  - url: 'https://www.kaiheila.cn/api/v3'
    description: 机器人接口
info:
  title: 开黑啦机器人API v3 开发者版
  version: 3.0.0
  termsOfService: 'https://developer.kaiheila.cn/doc/privacy'
  contact:
    email: apiteam@swagger.io
  license:
    name: MIT
    url: 'https://github.com/kaiheila/api-docs/blob/main/LICENSE'
  description: >
    <br>

    <div style="background-color: #F0F0F0;padding: 12px 0px 12px
    12px;border-left: 5px solid #F90258;">
      这不是一份官方文档，仅用于查看官方提供的OAS文件。
    </div>  

    <br>


    # 引言

    此文档仅用于方便开发者查看、确认开黑啦机器人API接口，官方文档地址：[开黑啦开发者平台](https://developer.kaiheila.cn/doc/)


    建议使用[rapidoc](https://mrin9.github.io/RapiDoc/index.html)查看此文档，示例链接：[文档查看示例](https://fi6.github.io/kaiheila-api-docs/oas/rapidoc-view.html)


    如果发现有任何问题，请提交PR，我们将尽快进行修复与合并。


    ## 机器人

    机器人是增加聊天乐趣和提升管理服务器效率的新方式。你可以通过调整机器人的[亲密度](https://developer.kaiheila.cn/bot)设置，来赋予它们独特的生命力，让它们与用户产生更为亲密的交互。当然你也可以创造一个严肃的管理机器人，或将他变成任何你想象中的样子，充分发挥你的想象力，让你的机器人变得与众不同！


    快去创建一个属于你的[机器人](https://developer.kaiheila.cn/bot)吧！


    # 参考

    ## 简介

    开黑啦的 API 正常分为两个核心层：

    - 常规的 http 接口，你可以用它来做一些常规操作。

    - 消息实时通知，你可以通过（webhook/websocket）来订阅系统的实时消息及事件，然后做出相应的操作等。


    通过上述两层的接口，我们可以在开黑啦中做出机器人，或者提供服务等。



    ## 常规 http 接口规范


    ### BaseUrl


    ```

    https://www.kaiheila.cn/api

    ```


    ### API版本管理

    开黑啦后续可能会有不同版本的 API。您可以通过像 `https://www.kaiheila.cn/api/v{version_number}`
    这样在请求路径中明确指定所要使用的 API 版本。如果省略掉 version_number, 它会指向默认的版本。目前支持的版本列表如下所示：



    版本  | 状态| 默认

    ---|---|--

    3| 开发中| 是



    ### 鉴权

    在开发者中心，在创建机器人后，我们可以得到一个 token，在请求所有的开黑啦接口时，我们需要在 http header 的
    `Authorization` 中加入该 token 以进行鉴权,格式为 `Authorization: TOKEN_TYPE
    TOKEN`。目前支持两种格式的鉴权：

    - 机器人。TOKEN_TYPE = Bot。

    - Oauth2。TOKEN_TYPE = Bearer。


    如下为机器人的鉴权示例:


    ```

    Authorization: Bot BHsTZ4232tLatgV5AFyjoqZGAHHmpl9mTxYQ/u4/80=

    ```


    ### 速度限制

    为了保护我们的系统，我们在 [RFC 6585](https://tools.ietf.org/html/rfc6585#section-4)
    的基础上做了一些扩展，来限制用户的接口调用速度。经常达到限速阀值或者忽略速度限制的API用户将会被撤销API密钥，并且被限制登录。有关速度限制的问题，请参阅[速率限制](https://developer.kaiheila.cn/doc/rate-limit)一节


    ### i18N

    如果希望本地化，可以在 http 头中加入 `Accept-Language` 头，如下为一个示例：

    ```

    Accept-Language: en-us

    ```


    系统如果支持该语言，系统会以该语言返回错误消息等。如果系统不支持，系统会以默认的 zh-cn 来返回接口的消息，提示等。



    ### 接口格式及返回说明

    - 接口分为 GET 请求和 POST 请求，所有找服务器拿数据均使用 GET 请求，提交数据给服务器使用 POST 请求

    - POST 请求若无特殊说明，均为 POST JSON 格式，即在 http header 中加入`Content-type:
    application/json`，并将数据以 json 字符串传递。

    - 所有的接口返回如下的格式：


    ```javascript

    {
        "code" : 0, // integer, 错误码，0代表成功，非0代表失败，具体的错误码参见错误码一览
        "message" : "error info", // string, 错误消息，具体的返回消息会根据Accept-Language来返回。
        "data" : [], // mixed, 具体的数据。
    }

    ```

    ### 接口字段说明

    由于一些历史原因，接口中可能会有一些不在文档中的字段，请大家务必使用文档中的字段，不在文档中的字段后续可能会更改。



    ### 请求参数


    在开黑啦整个 API 体系中，有一些参数是一致的，会在此处统一列出，后续不会再单独详细说明。


    正常的列表页，一般会有类似如下的参数：


    参数名 | 类型 |区域| 说明

    ---|---|---|---

    page |int|GET|列表页中有，代表页

    page_size|int|GET|列表页中有，每页数据大小，默认为 50, 常规情况下page_size最大为50

    sort|string|GET|代表排序的字段, 比如`-id`代表`id`按`DESC`排序，`id`代表`id`按`ASC`排序。不一定有,
    如果有，接口中会声明支持的排序字段。


    正常的列表页的返回参数会保持如下的格式:


    | 参数名   | 类型         |
    说明                                                         |

    | -------- | ------------ |
    ------------------------------------------------------------ |

    |items|Array|数据列表|

    |meta|Map|分页的信息|

    |↳page|int|页码|

    |↳page_total|int|总页数|

    |↳page_size|int|每一页的数据|

    |↳total|int|总数据量|

    |sort|Map|分页的排序, key:+-1, 如果为1代表按key升序，如果为-1代表按key降序|




    ## 消息通知

    消息通知在整个开黑啦体系中比较复杂，我们目前支持两种消息通知机制：

    - [Webhook](https://developer.kaiheila.cn/doc/webhook)

    - [Websocket](https://developer.kaiheila.cn/doc/websocket)


    不论是以何种方式来接受消息，它们都遵循着相同的规范：

    - 消息推送时，可能会有压缩(压缩默认采用zlib压缩【deflate】)。

    - 消息的含义，结构格式等基本保持一致。
tags:
  - name: KMarkDown
    description: >+
      # KMarkdown


      在发送聊天消息时，为了支持用户的复杂的消息需求，以及有更好的用户体验，我们引入了 markdown，同时，基于 markdown
      的标准规范，我们加入了自己的一些适配和扩展。为了与 markdown 进行区分，在本文档中，我们统一称之为 KMarkdown。


      我们仅支持在文档中的一些语法，如果某个语法在 markdown 中，但是却没在文档中提及，那么它属于我们目前不支持的语法，建议用户不要使用。


      我们还提供了kmarkdown消息编辑器，方便可视化编辑：[点击使用](https://kaiheila.cn/tools/message-builder.html#/kmarkdown)


      ## 主要格式规范


      1. 语法来源大部分来自于默认的 markdown 语法。如果无特殊说明，用户只需遵守 markdown 语法即可。

      2. 自定义的语法大部分会保证这样的格式：`(tagName)value(tagName)[attributes]`, 如果这个标签没有属性，那么
      `[attributes]` 会被省略。

      3. 大部分标签都支持换行。


      |格式|语法来源| 说明|

      |--|--|--|

      |`**加粗文字**`| markdown| 加粗|

      |`*斜体文字*`|markdown|斜体|

      |`***加粗斜体***`|markdown|加粗斜体|

      |`~~删除线~~`|markdown|删除线|

      |`[链接文字](链接地址)`|markdown|链接，仅允许 http, https 的链接|

      |`---`|markdown|分隔线|

      |`> hello world`|markdown|引用：换行会一直作用，直到遇见两个换行(\n\n),这两个换行实际不会显示换行|

      |`(ins)下划线内容(ins)`|自定义|下划线|

      |`(spl)剧透(spl)`|自定义|内容默认是遮住的，只有用户点击才会显示|

      |`:emoji:`|emoji|基本与emoji的
      [shortcode](https://www.webfx.com/tools/emoji-cheat-sheet/) 写法保持一致|

      |`(emj)服务器表情名(emj)[服务器表情id]`|自定义| 服务器表情，需要有服务器发送服务器表情的权限|

      |`(chn)频道ID(chn)`|自定义|频道，提及频道|

      |`(met)用户id/here/all(met)`|自定义|@用户，all 代表 @所有用户，here 代表 @所有在线用户|

      |`(rol)角色ID(rol)`|自定义|@某角色所有用户|

      |``` `行内代码` ```|markdown|行内代码|

      |` ```语言\n ``` `|markdown|代码块|

  - name: 卡片消息
    description: >+
      # 卡片消息


      卡片消息是结构化的消息,可以提供一个易用、统一的富交互形式。


      我们还提供了卡片消息编辑器，方便可视化编辑：[点击使用](https://kaiheila.cn/tools/message-builder.html#/card)


      ## 整体结构说明

      cardmessage主要由json构成，在卡片消息中，有四种类别的卡片结构：

      - 卡片，目前只有card。

      - 模块，主要有section, header, context等。

      - 元素：主要有plain-text, image, button等。

      - 结构：目前只有paragraph。


      ### 消息的主要结构

      - 一个卡片消息最多只允许5个卡片

      - 一个卡片可以有多个模块，但是一个卡片消息总共不允许超过50个模块


      ```javascript

      [
          {
              "type": "card",
              //...
              "modules" : [
                  // ...
              ]
          }
          // 其它card
      ]

      ```


      ### 主要结构说明

      所有的元素都有相似的结构，大体如下：

      ```javascript

      {
          "type" : "类别"，
          "foo" : "bar",   //属性参数
          "modules|elements|fields": [], //子元素，根据type类别有不同的值，卡片的为modules,模块的子元素为elements,结构的为fields。
      }

      ```


      ### 一些全局字段说明

      在很多结构中，有一些字段都是一样的，因此在此处说明，后面就不单独说明了：


      |字段|类型|说明|

      |--|--|--|

      |theme|string|主题，可选的值为：primary,success,danger,warning,info,secondary.默认为primary。|

      |size|string|大小，可选值为：xs,sm, md, lg, 一般默认为lg|


      ### 卡片消息发送说明

      在消息发送时，卡片消息的发送类型为`10`, 在发送时，content字段为json的字符串。详情参见消息发送接口。



      ## 卡片


      ### card

      **作用说明：** 标题模块只能支持展示标准文本（text），突出标题样式。


      **主要结构**：

      ```javascript

      {
          "type": "card",
          "theme" : "primary|warning|danger|info...", // 卡片风格，默认为primay
          "color":"#aaaaaa", //色值
          "size": "sm|lg", //目前只支持sm与lg, 如果不填为lg。 lg仅在PC端有效, 在移动端不管填什么，均为sm。
          "modules": [
              // modules...
          ]
      }

      ```

      **说明：**

      - modules只能为模块

      - 单个card模块数量不限制，但是总消息最多只能有50个模块

      - theme, size参见[全局字段说明

      ](#一些全局字段说明),卡片中，size只允许lg和sm

      - color代表卡片边框具体颜色，如果填了，则使用该color，如果未填，则使用theme来渲染卡片颜色。


      ## 模块


      ### 标题模块

      **作用说明：** 标题用于卡片中，突出标题样式。  

      **主要结构：**

      ```javascript

      {
          "type": "header",
          "text" : {
              "type": "plain-text",
              "content": "标题1"
          } 
      }

      ```

      **说明：**

      - text 为文字元素且content不能超过100个字


      ### 内容模块

      **作用说明：** 结构化的内容，显示文本+其它元素。  

      **主要结构：**

      ```javascript

      {
          "type": "section",
          "mode" : "left|right", //accessory在左侧还是在右侧
          "text" : {
              "type": "plain-text|kmarkdown|paragraph",
              //...
          },
          "accessory": {
              "type": "image|button",
              //...
          }
      }

      ```

      **说明：**

      - text可以为 plain-text, kmarkdown或者paragraph

      - accessory可以为image或者button

      - button不能放置在左侧

      - mode代表accessory是放置在左侧还是在右侧


      ### 图片模块

      **作用说明：** 1到多张图片的组合  

      **主要结构:**

      ```javascript

      {
          "type" : "image-group",
          "elements": [
              //图片元素，其它元素无效
          ],
      }

      ```

      **说明：**

      - elements只能有image元素，只能有1-9张图片


      ### 交互模块

      **作用说明：** 交互模块中包含交互控件元素，目前支持的交互控件为按钮（button）  

      **主要结构:**

      ```javascript

      {
          "type": "action-group",
          "elements": [
              // buttons
          ],
      }

      ```

      **说明：**

      - elements中只能为button

      - elements最多只能有4个


      ### 备注模块

      **作用说明：** 展示图文混合的内容。  

      **主要结构：**

      ```javascript

      {
          "type": "context",
          "elements": [],
      }

      ```

      **说明：**

      - elements中可以为：plain-text, kmarkdown, image

      - elements最多可包含10个元素


      ### 分割线模块

      **作用说明：** 展示分割线。  

      **主要结构：**

      ```javascript

      {
          "type": "divider",
      }

      ```


      ### 文件模块

      **作用说明：** 展示文件，目前有三种，文件，视频和音频。  

      **主要结构：**

      ```javascript

      {
          "type": "file|audio|video",
          "src": "", //文件|音频|视频地址
          "title": "标题",
          "cover": "" //封面图
      }

      ```

      规则：

      - cover仅在音频的时候有效，是音频的封面图。



      ### 倒计时模块

      **作用说明：** 展示倒计时。  

      **主要结构：**

      ```javascript

      {
          "type": "countdown",
          "endTime" : 1608819168000, //到期的毫秒时间戳
          "startTime" : 1608819168000, //起始的毫秒时间戳，仅当mode为second才有这个字段
          "mode" : "day,hour,second", //倒计时样式, 按天显示，按小时显示或者按秒显示
      }

      ```

      规则：

      - mode主要是倒计时的样式，目前支持三种样式。

      - startTime和endTime为毫秒时间戳，startTime和endTime不能小于服务器当前时间戳。


      ## 元素



      ### 普通文本

      **作用说明：** 显示文字。  

      **主要结构：**

      ```javascript

      {
          "type": "plain-text",
          "content" : "",
          "emoji": true|false,
      }

      ```

      **规则：**

      - emoji为布尔型，默认为true。如果为true,会把emoji的shortcut转为emoji 

      - 为了方便书写，所有plain-text的使用处可以简单的用字符串代替。

      - 最大2000个字


      ```javascript

      // "hello world" 等价于：

      {  
          "type" : "plain-text",
          "emoji": true,
          "content" : "hello world",
      }

      ```


      ### kmarkdown

      **作用说明：** 显示文字。  

      **主要结构：**

      ```javascript

      {
          "type": "kmarkdown",
          "content" : "**hello**",
      }

      ```

      **规则：**

      - 最大5000个字


      ### 图片

      **作用说明：** 显示图片。  

      **主要结构：**

      ```javascript

      {
          "type": "image",
          "src" : "",
          "alt" : "",
          "size" : "sm|lg", // size只用在图文混排  图片组大小固定
          "circle" : true|false,
      }

      ```

      **规则：**

      - 图片类型（MimeType）限制说明：目前仅支持`image/jpeg`, `image/gif`, `image/png`这3种

      - 图片的size默认为lg


      ### 按钮

      **作用说明：** 提供交互的功能

      ```javascript

      {
          "type": "button",
          "theme": "primary|warning|info|danger|...", //按钮的主题颜色
          "value": "", //要传递的value，为string
          "click": "", //click时的事件类型， return-val 返回value值
          "text": "",
      }

      ```

      - value只能为string

      - text可以为plain-text, kmarkdown

      - click代表用户点击的事件,默认为""，代表无任何事件。
          - 当为link时，会跳转到value代表的链接;
          - 当为return-val时，系统会通过系统消息将消息id,点击用户id和value发回给发送者，发送者可以根据自己的需求进行处理,消息事件参见[button点击事件](https://developer.kaiheila.cn/doc/event/user#Card%E6%B6%88%E6%81%AF%E4%B8%AD%E7%9A%84Button%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6)。

      ## 结构体


      ### 区域文本

      **作用说明：** 支持分栏结构，将模块分为左右两栏，根据顺序自动排列，支持更自由的文字排版模式，提高可维护性   

      **主要结构：**

      ```javascript

      {
          "type": "paragraph",
          "cols": 3, //移动端忽略该参数
          "fields" : [
          ],
      }

      ```

      **规则：**

      - cols是int,可以的取值为1-3

      - fields可以的元素为text, kmarkdown或context

      - paragraph最多有50个元素

  - name: 服务器
    description: 服务器相关接口
  - name: 频道
    description: 服务器频道相关接口
  - name: 频道消息
    description: 频道消息相关接口
  - name: 私聊会话
    description: 私聊会话相关接口
  - name: 私聊消息
    description: 私聊消息相关接口
  - name: 用户
    description: 用户相关接口
  - name: 服务器角色权限
    description: >
      ## 权限说明


      权限是一个 unsigned int 值，由比特位代表是否拥有对应的权限。

      权限值与对应比特位进行按位与操作，判断是否拥有该权限。


      ```c

      // 判断是否有某权限。其中: permissions代表权限值，bitValue代表某权限比特位，1 << bitValue 代表某权限值。

      permissions & (1 << bitValue)  == (1 << bitValue);

      ```


      数据位的说明如下：


      | 比特位 | 值        | 权限               |
      说明                                                                                                      
      |

      | ------ | --------- | ------------------ |
      ----------------------------------------------------------------------------------------------------------
      |

      | 0      | 1         | 管理员             |
      拥有此权限会获得完整的管理权，包括绕开所有其他权限（包括频道权限）限制，属于危险权限。                     |

      | 1      | 2         | 管理服务器         |
      拥有此权限的成员可以修改服务器名称和更换区域。                                                            
      |

      | 2      | 4         | 查看管理日志       |
      拥有此权限的成员可以查看服务器的管理日志。                                                                
      |

      | 3      | 8         | 创建服务器邀请     |
      能否创建服务器邀请链接                                                                                    
      |

      | 4      | 16        | 管理邀请           |
      拥有该权限可以管理服务器的邀请                                                                            
      |

      | 5      | 32        | 频道管理           |
      拥有此权限的成员可以创建新的频道以及编辑或删除已存在的频道。                                              
      |

      | 6      | 64        | 踢出用户          
      |                                                                                                           
      |

      | 7      | 128       | 封禁用户          
      |                                                                                                           
      |

      | 8      | 256       | 管理自定义表情    
      |                                                                                                           
      |

      | 9      | 512       | 修改服务器昵称     |
      拥有此权限的用户可以更改他们的昵称。                                                                      
      |

      | 10     | 1024      | 管理角色权限       |
      拥有此权限成员可以创建新的角色和编辑删除低于该角色的身份。                                                
      |

      | 11     | 2048      | 查看文字、语音频道
      |                                                                                                           
      |

      | 12     | 4096      | 发布消息          
      |                                                                                                           
      |

      | 13     | 8192      | 管理消息           |
      拥有此权限的成员可以删除其他成员发出的消息和置顶消息。                                                    
      |

      | 14     | 16384     | 上传文件          
      |                                                                                                           
      |

      | 15     | 32768     | 语音链接          
      |                                                                                                           
      |

      | 16     | 65536     | 语音管理           |
      拥有此权限的成员可以把其他成员移动和踢出频道；但此类移动仅限于在该成员和被移动成员均有权限的频道之间进行。 |

      | 17     | 131072    | 提及@全体成员      |
      拥有此权限的成员可使用@全体成员以提及该频道中所有成员。                                                   
      |

      | 18     | 262144    | 添加反应           |
      拥有此权限的成员可以对消息添加新的反应。                                                                  
      |

      | 19     | 524288    | 跟随添加反应       |
      拥有此权限的成员可以跟随使用已经添加的反应。                                                              
      |

      | 20     | 1048576   | 被动连接语音频道   |
      拥有此限制的成员无法主动连接语音频道，只能在被动邀请或被人移动时，才可以进入语音频道。                     |

      | 21     | 2097152   | 仅使用按键说话     |
      拥有此限制的成员加入语音频道后，只能使用按键说话。                                                        
      |

      | 22     | 4194304   | 使用自由麦         |
      没有此权限的成员，必须在频道内使用按键说话。                                                              
      |

      | 23     | 8388608   | 说话              
      |                                                                                                           
      |

      | 24     | 16777216  | 服务器静音        
      |                                                                                                           
      |

      | 25     | 33554432  | 服务器闭麦        
      |                                                                                                           
      |

      | 26     | 67108864  | 修改他人昵称       |
      拥有此权限的用户可以更改他人的昵称                                                                        
      |

      | 27     | 134217728 | 播放伴奏           |
      拥有此权限的成员可在语音频道中播放音乐伴奏                                                                
      |
  - name: 服务器表情
    description: 服务器表情相关接口
  - name: 邀请
    description: 邀请相关接口
  - name: gateway
    description: Gateway接口
  - name: 亲密度
    description: 亲密度相关接口列表
  - name: 附件
    description: 附件相关接口
  - name: 事件结构/格式说明
    description: "# 事件结构/格式说明\r\n\r\n当 websocket 或 webhook 收到 `s=0` 的消息时，代表当前收到的消息是事件(包含用户的聊天消息及系统的通知消息等)。本文会具体描述所有的事件类型，并且明确其字段的含义。开发者可以根据本文档做出相应的开发处理。\r\n\r\n## 事件基本结构及含义说明\r\n\r\n目前所有的消息都会有如下的结构：\r\n\r\n```json\r\n{\r\n    s: 0, // 信令类型\r\n    d: [...], //数据\r\n}\r\n```\r\n\r\n本文主要讲述的是当 `s=0` 时，data 的数据结构，信令的具体含义参见[websocket](https://developer.kaiheila.cn/doc/websocket).\r\n\r\n## 事件主要格式\r\n\r\n### 格式说明\r\n\r\n| 字段          | 类型   | 说明                                                         |\r\n| ------------- | ------ | ------------------------------------------------------------ |\r\n| channel_type  | string | 消息频道类型, `GROUP` 为频道消息                             |\r\n| type          | int    | 1:文字消息, 2:图片消息，3:视频消息，4:文件消息， 8:音频消息，9:KMarkdown，10:card消息，255:系统消息, 其它的暂未开放 |\r\n| target_id     | string | 发送目的 id，如果为是 GROUP 消息，则 target_id 代表频道 id   |\r\n| author_id     | string | 发送者 id, 1 代表系统                                        |\r\n| content       | string | 消息内容, 文件，图片，视频时，content 为 url                 |\r\n| msg_id        | string | 消息的 id                                                    |\r\n| msg_timestamp | int    | 消息发送时间的毫秒时间戳                                     |\r\n| nonce         | string | 随机串，与用户消息发送 api 中传的 nonce 保持一致             |\r\n| extra         | mixed  | 不同的消息类型，结构不一致                                   |\r\n\r\n### 文字频道消息extra说明\r\n\r\n**当type非系统消息(255)时**\r\n\r\n| 字段          | 类型    | 说明                                                         |\r\n| ------------- | ------- | ------------------------------------------------------------ |\r\n| type          | int     | 同上面 type                                                  |\r\n| guild_id      | string  | 服务器 id                                                    |\r\n| channel_name  | string  | 频道名                                                       |\r\n| mention       | Array   | 提及到的用户 id 的列表                                       |\r\n| mention_all   | boolean | 是否 mention 所有用户                                        |\r\n| mention_roles | Array   | mention 用户角色的数组                                       |\r\n| mention_here  | boolean | 是否 mention 在线用户                                        |\r\n| author        | Map     | 用户信息, 见[对象-用户User](https://developer.kaiheila.cn/doc/objects#用户User) |\r\n\r\n### 系统事件消息extra说明\r\n\r\n**当type为系统消息(255)时**\r\n\r\n| 字段 | 类型   | 说明                                         |\r\n| ---- | ------ | -------------------------------------------- |\r\n| type | string | 标识该事件的类型                             |\r\n| body | Map    | 该事件关联的具体数据, 详见各系统消息事件示例 |\r\n\r\n\r\n## "
  - name: 消息相关事件
    description: 消息相关事件
  - name: 频道相关事件
    description: 频道相关事件
  - name: 服务器相关事件
    description: 服务器相关事件
  - name: 用户相关事件
    description: 用户相关事件
  - name: 私聊相关事件
    description: 私聊相关事件
  - name: 服务器成员相关事件
    description: 服务器成员相关事件
paths:
  /guild/list:
    get:
      tags:
        - 服务器
      summary: 获取当前用户加入的服务器列表
      description: ''
      operationId: getJoinedGuilds
      parameters:
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: sort
          in: query
          description: '代表排序的字段, 比如-id代表id按DESC排序，id代表id按ASC排序。不一定有, 如果有，接口中会声明支持的排序字段。'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Guild'
  /guild/index:
    get:
      tags:
        - 服务器
      deprecated: true
      summary: 获取当前用户加入的服务器列表
      description: ''
      parameters: []
      operationId: getJoinedGuildsOld
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guild'
  /guild/view:
    get:
      tags:
        - 服务器
      summary: 获取服务器详情
      operationId: getGuildById
      parameters:
        - $ref: '#/components/parameters/GuildIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Guild'
  /guild/user-list:
    get:
      tags:
        - 服务器
      summary: 获取服务器的用户列表
      operationId: getUsersInGuild
      parameters:
        - $ref: '#/components/parameters/GuildIdParam'
        - $ref: '#/components/parameters/GuildChannelIdParam'
          required: false
        - name: search
          in: query
          description: 搜索关键字，在用户名或昵称中搜索
          schema:
            type: string
        - name: role_id
          in: query
          description: 角色 ID，获取特定角色的用户列表
          schema:
            type: integer
        - $ref: '#/components/parameters/MobileVerifiedParam'
        - name: active_time
          in: query
          description: 根据活跃时间排序，`0`是顺序排列，`1`是倒序排列
          schema:
            type: integer
        - name: joined_at
          in: query
          description: 根据加入时间排序，`0`是顺序排列，`1`是倒序排列
          schema:
            type: integer
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: filter_user_id
          in: query
          description: 获取指定id所属用户的信息
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/basic'
                              user_count:
                                type: integer
                                description: 用户数量
                                example: 10
                              online_count:
                                type: integer
                                description: 用户数量
                                example: 3
                              offline_count:
                                type: integer
                                description: 离线用户数量
                                example: 7
  /guild/nickname:
    post:
      tags:
        - 服务器
      summary: 修改服务器中的用户昵称
      operationId: changeUserNickname
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                nickname:
                  type: string
                  description: 昵称，2 - 64 长度，不传则清空昵称
                user_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - description: 要修改昵称的目标用户 ID，不传则修改当前登陆用户的昵称
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /guild/leave:
    post:
      tags:
        - 服务器
      summary: 离开服务器
      operationId: leaveGuild
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /guild/kickout:
    post:
      tags:
        - 服务器
      summary: 踢出服务器
      operationId: kickUserById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - description: 目标用户ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /guild-mute/list:
    get:
      tags:
        - 服务器
      summary: 服务器静音闭麦列表
      operationId: getGuildMuteUsers
      parameters:
        - $ref: '#/components/parameters/GuildIdParam'
        - name: return_type
          in: query
          description: '返回格式，建议为"detail", 其他情况仅作为兼容'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          mic:
                            description: return_type为detail时返回
                            type: object
                            properties:
                              type:
                                type: integer
                                description: 闭麦类型，1为麦克风闭麦
                                enum:
                                  - 1
                              user_ids:
                                type: array
                                items:
                                  $ref: '#/components/schemas/id'
                          headset:
                            description: return_type为detail时返回
                            type: object
                            properties:
                              type:
                                type: integer
                                description: 闭麦类型，2为耳机静音
                                enum:
                                  - 2
                              user_ids:
                                type: array
                                items:
                                  $ref: '#/components/schemas/id'
  /guild-mute/create:
    post:
      tags:
        - 服务器
      summary: 添加服务器闭麦或静音
      operationId: muteUserById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
                - type
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - description: 目标用户ID
                type:
                  type: integer
                  description: 静音类型，`1`代表麦克风闭麦，`2`代表耳机静音
                  enum:
                    - 1
                    - 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /guild-mute/delete:
    post:
      tags:
        - 服务器
      summary: 删除服务器闭麦或静音
      operationId: unmuteUserById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
                - type
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - description: 目标用户ID
                type:
                  type: integer
                  description: 静音类型，`1`代表麦克风闭麦，`2`代表耳机静音
                  enum:
                    - 1
                    - 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /channel/list:
    get:
      tags:
        - 频道
      summary: 获取频道列表
      operationId: getGuildChannels
      parameters:
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/GuildIdParam'
        - $ref: '#/components/parameters/GuildChannelTypeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/GuildChannel'
  /channel/view:
    get:
      tags:
        - 频道
      summary: 获取频道详情
      parameters:
        - name: target_id
          required: true
          in: query
          schema:
            $ref: '#/components/schemas/GuildChannelId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GuildChannel'
  /channel/create:
    post:
      tags:
        - 频道
      summary: 创建频道
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - name
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                parent_id:
                  allOf:
                    - $ref: '#/components/schemas/GuildChannelId'
                    - description: 父分组id
                name:
                  type: string
                  description: 频道名称
                type:
                  allOf:
                    - $ref: '#/components/schemas/GuildChannelType'
                    - description: '频道类型, `1`为文字，`2`为语音, 默认为`1`'
                limit_amount:
                  type: integer
                  maximum: 99
                  description: 语音频道人数限制，最大99
                voice_quality:
                  type: integer
                  description: 语音音质，默认为`2`。`1`流畅，`2`正常，`3`高质量
                  enum:
                    - 1
                    - 2
                    - 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GuildChannel'
  /channel/delete:
    post:
      tags:
        - 频道
      summary: 删除频道
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
              properties:
                channel_id:
                  $ref: '#/components/schemas/GuildChannelId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /channel/user-list:
    get:
      tags:
        - 频道
      summary: 查询语音频道内用户
      description: 只能在语音频道之间移动，用户也必须在其他语音频道在线才能够移动到目标频道。
      parameters:
        - name: target_id
          required: true
          in: query
          description: '目标频道id, 需要是语音频道'
          schema:
            $ref: '#/components/schemas/GuildChannelId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_ids:
                            type: array
                            description: 用户id的数组
                            items:
                              $ref: '#/components/schemas/id'
  /channel/move-user:
    post:
      tags:
        - 频道
      summary: 语音频道之间移动用户
      description: 只能在语音频道之间移动，用户也必须在其他语音频道在线才能够移动到目标频道。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
                - user_ids
              properties:
                channel_id:
                  allOf:
                    - $ref: '#/components/schemas/GuildChannelId'
                    - description: '目标频道id, 需要是语音频道'
                user_ids:
                  type: array
                  description: 用户id的数组
                  items:
                    $ref: '#/components/schemas/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_ids:
                            type: array
                            description: 用户id的数组
                            items:
                              $ref: '#/components/schemas/id'
  /channel-role/index:
    get:
      tags:
        - 频道
      summary: 频道角色权限详情
      parameters:
        - $ref: '#/components/parameters/GuildChannelIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          permission_overwrites:
                            type: array
                            description: '频道权限覆写的角色列表, role_id为角色id, 其它字段见下表'
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    role_id:
                                      type: string
                                - $ref: '#/components/schemas/GuildChannelPermission'
                          permission_users:
                            type: array
                            description: 频道权限覆写的用户列表
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    user:
                                      $ref: '#/components/schemas/basic'
                                - $ref: '#/components/schemas/GuildChannelPermission'
                          permission_sync:
                            type: integer
                            description: 是否同步分组的权限
                            example: 0
  /channel-role/create:
    post:
      tags:
        - 频道
      summary: 创建频道角色权限
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuildChannelRoleRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: {}
  /channel-role/update:
    post:
      tags:
        - 频道
      summary: 更新频道角色权限
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/GuildChannelRoleRequest'
                - type: object
                  properties:
                    allow:
                      type: integer
                      description: '默认为0,想要设置的允许的权限值'
                      default: 0
                    deny:
                      type: integer
                      description: '默认为0,想要设置的拒绝的权限值'
                      default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example:
                          user_id: '2418200000'
                          allow: 2048
                          deny: 0
                        allOf:
                          - type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/id'
                              role_id:
                                $ref: '#/components/schemas/GuildRoleId'
                          - $ref: '#/components/schemas/GuildChannelPermission'
  /channel-role/delete:
    post:
      tags:
        - 频道
      summary: 删除频道角色权限
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuildChannelRoleRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: {}
  /message/list:
    get:
      tags:
        - 频道消息
      summary: 获取频道聊天消息列表
      description: 此接口非标准分页，需要根据参考消息来查询相邻分页的消息
      parameters:
        - name: target_id
          in: query
          description: 频道id
          required: true
          schema:
            $ref: '#/components/schemas/GuildChannelId'
        - name: msg_id
          in: query
          description: 参考消息id，不传则查询最新消息
          schema:
            type: string
        - name: pin
          in: query
          description: 只能为0或者1，是否查询置顶消息。 置顶消息只支持查询最新的消息
          schema:
            type: integer
            format: unsigned integer
            enum:
              - 0
              - 1
        - $ref: '#/components/parameters/MessageListFlagParam'
        - name: page_size
          in: query
          description: '当前分页消息数量, 默认50'
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/_index_basic'
  /message/create:
    post:
      tags:
        - 频道消息
      summary: 发送频道聊天消息
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SendMessageRequest'
                - type: object
                  required:
                    - target_id
                  properties:
                    target_id:
                      allOf:
                        - $ref: '#/components/schemas/GuildChannelId'
                      description: 目标频道 id
                    temp_target_id:
                      type: string
                      description: >-
                        用户id,如果传了，代表该消息是临时消息，该消息不会存数据库，但是会在频道内只给该用户推送临时消息。用于在频道内针对用户的操作进行单独的回应通知等。
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  data:
                    properties:
                      msg_id:
                        type: string
                        description: 服务端生成的消息 id
                        example: ''
                      msg_timestamp:
                        type: integer
                        description: '消息发送时间(ms, 服务器时间戳)'
                        example: 1607072537177
                      nonce:
                        type: string
                        description: 原样返回的字符串
                        example: xxxx
  /message/update:
    post:
      tags:
        - 频道消息
      summary: 更新频道聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                content:
                  type: string
                  description: 消息内容
                quote:
                  allOf:
                    - $ref: '#/components/schemas/_fields_id'
                  description: 回复某条消息的`msgId`。如果为空，则代表删除回复，不传则无影响。
                temp_target_id:
                  type: string
                  description: 用户id，针对特定用户临时更新消息，必须是正常消息才能更新。与发送临时消息概念不同，但同样不保存数据库。
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /message/delete:
    post:
      tags:
        - 频道消息
      summary: 删除频道聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /message/reaction-list:
    get:
      tags:
        - 频道消息
      summary: 获取频道消息某个回应的用户列表
      parameters:
        - name: msg_id
          in: query
          description: 频道消息的id
          required: true
          schema:
            $ref: '#/components/schemas/_fields_id'
        - name: emoji
          in: query
          description: 'emoji的id, 可以为GuildEmoji或者Emoji, 注意：在get中，应该进行urlencode'
          schema:
            $ref: '#/components/schemas/GuildEmojiId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/basic'
                            - type: object
                              properties:
                                reaction_time:
                                  type: integer
                                  description: 用户点击reaction的毫秒时间戳
  /message/add-reaction:
    post:
      tags:
        - 频道消息
      summary: 为消息添加回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                emoji:
                  $ref: '#/components/schemas/GuildEmojiId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /message/delete-reaction:
    post:
      tags:
        - 频道消息
      summary: 为消息删除回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                emoji:
                  $ref: '#/components/schemas/GuildEmojiId'
                user_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - description: '用户的id, 如果不填则为自己的id。删除别人的reaction需要有管理频道消息的权限'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /user-chat/list:
    get:
      tags:
        - 私聊会话
      summary: 获取私信频道列表
      parameters:
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/UserChat'
  /user-chat/view:
    get:
      tags:
        - 私聊会话
      summary: 获取私信频道详情
      parameters:
        - name: chat_code
          in: query
          description: 私聊会话 Code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserChatDetail'
  /user-chat/create:
    post:
      tags:
        - 私聊会话
      summary: 创建私信频道
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                  description: 目标用户id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserChatDetail'
  /user-chat/delete:
    post:
      tags:
        - 私聊会话
      summary: 删除私信频道
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                  description: 目标用户id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /direct-message/list:
    get:
      tags:
        - 私聊消息
      summary: 获取私信消息列表
      parameters:
        - name: chat_code
          in: query
          description: 私信会话 Code。`chat_code`与`target_id`必须传一个
          schema:
            type: string
        - name: target_id
          description: 目标用户 id，后端会自动创建会话。有此参数之后可不传`chat_code`参数
          in: query
          schema:
            $ref: '#/components/schemas/id'
        - name: msg_id
          description: 参考消息 id，不传则查询最新消息
          in: query
          schema:
            $ref: '#/components/schemas/_fields_id'
        - $ref: '#/components/parameters/MessageListFlagParam'
        - $ref: '#/components/parameters/PageNumberParam'
        - name: page_size
          in: query
          description: '当前分页消息数量, 默认50'
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/DirectMessage'
  /direct-message/create:
    post:
      tags:
        - 私聊消息
      summary: 发送私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SendMessageRequest'
              type: object
              properties:
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                  description: 目标用户 id，后端会自动创建会话。有此参数之后可不传`chat_code`参数
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  data:
                    properties:
                      msg_id:
                        type: string
                        description: 服务端生成的消息 id
                        example: 50974c-364c983fa6cb
                      msg_timestamp:
                        type: integer
                        description: '消息发送时间(ms, 服务器时间戳)'
                        example: 1607072537177
                      nonce:
                        type: string
                        description: 原样返回的字符串
                        example: xxxx
  /direct-message/update:
    post:
      tags:
        - 私聊消息
      summary: 更新私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                content:
                  type: string
                  description: 消息内容
                quote:
                  allOf:
                    - $ref: '#/components/schemas/_fields_id'
                  description: 回复某条消息的`msgId`。如果为空，则代表删除回复，不传则无影响。
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /direct-message/delete:
    post:
      tags:
        - 私聊消息
      summary: 删除私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /direct-message/reaction-list:
    get:
      tags:
        - 私聊消息
      summary: 获取消息某个回应的用户列表
      parameters:
        - name: msg_id
          in: query
          description: 消息的id
          required: true
          schema:
            $ref: '#/components/schemas/_fields_id'
        - name: emoji
          in: query
          description: 'emoji的id, 可以为GuildEmoji或者Emoji, 注意：在get中，应该进行urlencode'
          schema:
            $ref: '#/components/schemas/GuildEmojiId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/basic'
                            - type: object
                              properties:
                                reaction_time:
                                  type: integer
                                  description: 用户点击reaction的毫秒时间戳
  /direct-message/add-reaction:
    post:
      tags:
        - 私聊消息
      summary: 为消息添加回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                emoji:
                  $ref: '#/components/schemas/GuildEmojiId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /direct-message/delete-reaction:
    post:
      tags:
        - 私聊消息
      summary: 为消息删除回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                emoji:
                  $ref: '#/components/schemas/GuildEmojiId'
                user_id:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - description: '用户的id, 如果不填则为自己的id。删除别人的reaction需要有管理频道消息的权限'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /gateway/index:
    get:
      tags:
        - gateway
      summary: 获取网关连接地址
      parameters:
        - name: compress
          in: query
          description: '下发数据是否压缩，默认为`1`,代表压缩'
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      url:
                        type: string
                        description: 网关的连接地址
                        example: 'wss://xxxx'
  /user/me:
    get:
      tags:
        - 用户
      summary: 获取当前用户信息
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/basic'
                          - type: object
                            properties:
                              mobile_verified:
                                type: boolean
                                description: 手机号是否已验证
                                example: true
                              mobile_prefix:
                                type: string
                                description: '手机区号,如中国为86'
                                example: '86'
                              mobile:
                                type: string
                                description: 用户手机号，带掩码
                                example: 110****2333
                              invited_count:
                                type: integer
                                description: 当前邀请注册的人数
                                example: 3
  /user/view:
    get:
      tags:
        - 用户
      summary: 获取目标用户信息
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - name: guild_id
          in: query
          description: 服务器id
          schema:
            $ref: '#/components/schemas/GuildId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/basic'
                          - type: object
                            properties:
                              mobile_verified:
                                type: boolean
                                description: 手机号是否已验证
                                example: true
                              roles:
                                type: array
                                description: 用户在当前服务器中的角色 id 组成的列表
                                items:
                                  $ref: '#/components/schemas/GuildRoleId'
                              joined_at:
                                type: integer
                                description: 加入服务器时间
                                example: 1621338425000
                              active_time:
                                type: integer
                                description: 活跃时间
                                example: 1628688607719
  /asset/create:
    post:
      tags:
        - 附件
      summary: 上传多媒体文件
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                            description: 资源url
                            example: >-
                              https://img.kaiheila.cn/attachments/2021-01/18/xxxxxxxxx.txt
  /guild-role/list:
    get:
      tags:
        - 服务器角色权限
      summary: 获取服务器角色列表
      parameters:
        - $ref: '#/components/parameters/GuildIdParam'
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  $ref: '#/components/schemas/GuildRole'
  /guild-role/create:
    post:
      tags:
        - 服务器角色权限
      summary: 创建服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                name:
                  type: string
                  description: 如果不写，则为"新角色"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GuildRole'
  /guild-role/update:
    post:
      tags:
        - 服务器角色权限
      summary: 更新服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - role_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                role_id:
                  type: integer
                  format: unsigned integer
                  description: 角色id
                  example: 702
                name:
                  type: string
                  description: 角色名称
                  example: 管理员
                color:
                  type: integer
                  format: unsigned integer
                  minimum: 0
                  maximum: 16777215
                  description: 颜色
                  example: 0
                hoist:
                  type: integer
                  format: unsigned integer
                  description: 只能为0或者1，是否把该角色的用户在用户列表排到前面
                  enum:
                    - 0
                    - 1
                mentionable:
                  type: integer
                  format: unsigned integer
                  description: 只能为0或者1，该角色是否可以被提及
                  enum:
                    - 0
                    - 1
                permissions:
                  type: integer
                  format: unsigned integer
                  description: >-
                    权限,参见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)
                  example: 2048
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GuildRole'
  /guild-role/delete:
    post:
      tags:
        - 服务器角色权限
      summary: 删除服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - role_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                role_id:
                  type: integer
                  format: unsigned integer
                  description: 角色id
                  example: 702
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /guild-role/grant:
    post:
      tags:
        - 服务器角色权限
      summary: 赋予用户角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - user_id
                - role_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                user_id:
                  $ref: '#/components/schemas/id'
                role_id:
                  $ref: '#/components/schemas/GuildRoleId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            $ref: '#/components/schemas/id'
                          guild_id:
                            $ref: '#/components/schemas/GuildId'
                          roles:
                            type: array
                            description: 角色id的列表
                            items:
                              $ref: '#/components/schemas/GuildRoleId'
  /guild-role/revoke:
    post:
      tags:
        - 服务器角色权限
      summary: 删除用户角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - user_id
                - role_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                user_id:
                  $ref: '#/components/schemas/id'
                role_id:
                  $ref: '#/components/schemas/GuildRoleId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            $ref: '#/components/schemas/id'
                          guild_id:
                            $ref: '#/components/schemas/GuildId'
                          roles:
                            type: array
                            description: 角色id的列表
                            items:
                              $ref: '#/components/schemas/GuildRoleId'
  /intimacy/index:
    get:
      tags:
        - 亲密度
      summary: 获取用户的亲密度
      description: 机器人可以在后台配置默认的初始亲密度和形象，当用户触发某些事件时，机器人可以根据一些逻辑来更新与该用户的亲密度以及形象展示。
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          img_url:
                            type: string
                            description: 机器人给用户显示的形象图片地址
                          social_info:
                            type: string
                            description: 机器人显示给用户的社交信息
                            example: test
                          last_read:
                            type: integer
                            description: 用户上次查看的时间戳
                            example: 0
                          img_list:
                            type: array
                            description: 形象图片的总列表
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  description: 形象图片的 id
                                  example: '11'
                                url:
                                  type: string
                                  description: 形象图片的地址
                                  example: ''
  /intimacy/update:
    post:
      tags:
        - 亲密度
      summary: 更新用户亲密度
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  $ref: '#/components/schemas/id'
                score:
                  type: integer
                  description: 亲密度，0-2200
                  example: 123
                social_info:
                  type: string
                  description: 机器人与用户的社交信息，500 字以内
                  example: test
                img_id:
                  type: string
                  description: 表情 ID
                  example: '1'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /guild-emoji/list:
    get:
      tags:
        - 服务器表情
      summary: 获取服务器表情列表
      parameters:
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/GuildIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  $ref: '#/components/schemas/GuildEmoji'
  /guild-emoji/create:
    post:
      tags:
        - 服务器表情
      summary: 创建服务器表情
      description: Header 中 Content-Type 必须为 multipart/form-data
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - guild_id
                - emoji
              properties:
                name:
                  type: string
                  description: 表情名。长度限制 2 - 32 字符，如果不写，则为随机字符串
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                emoji:
                  type: string
                  format: binary
                  description: 表情文件。必须为 PNG 类型，大小不能超过 256 KB
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GuildEmoji'
  /guild-emoji/update:
    post:
      tags:
        - 服务器表情
      summary: 更新服务器表情
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - id
              properties:
                name:
                  type: string
                  description: 表情名。长度限制 2 - 32 字符，如果不写，则为随机字符串
                id:
                  type: string
                  description: 表情 ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /guild-emoji/delete:
    post:
      tags:
        - 服务器表情
      summary: 删除服务器表情
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: 表情 ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /invite/list:
    get:
      tags:
        - 邀请
      summary: 获取邀请列表
      description: 服务器id或者频道id必须填一个
      parameters:
        - name: guild_id
          in: query
          description: 服务器id
          required: false
          schema:
            $ref: '#/components/schemas/GuildId'
        - $ref: '#/components/parameters/GuildChannelIdParam'
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    channel_id:
                                      $ref: '#/components/schemas/GuildChannelId'
                                    guild_id:
                                      $ref: '#/components/schemas/GuildId'
                                    url_code:
                                      type: string
                                      description: 邀请码
                                      example: XXX
                                    url:
                                      type: string
                                      description: 邀请链接
                                      example: 'https://kaihei.co/XXX'
                                    user:
                                      $ref: '#/components/schemas/basic'
  /invite/create:
    post:
      tags:
        - 邀请
      summary: 创建邀请链接
      description: 服务器id或者频道id必须填一个
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                channel_id:
                  $ref: '#/components/schemas/GuildChannelId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                            description: 邀请链接
                            example: 'https://kaihei.co/xxxx'
  /invite/delete:
    post:
      tags:
        - 邀请
      summary: 删除邀请链接
      description: 服务器id或者频道id必须填一个
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - url_code
              properties:
                url_code:
                  type: string
                  example: XXX
                guild_id:
                  $ref: '#/components/schemas/GuildId'
                channel_id:
                  $ref: '#/components/schemas/GuildChannelId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
webhooks:
  textMessage:
    post:
      tags:
        - 消息相关事件
      summary: 文字消息
      requestBody:
        $ref: '#/components/requestBodies/text'
  imageMessage:
    post:
      tags:
        - 消息相关事件
      summary: 图片消息
      requestBody:
        $ref: '#/components/requestBodies/image'
  videoMessage:
    post:
      tags:
        - 消息相关事件
      summary: 视频消息
      requestBody:
        $ref: '#/components/requestBodies/video'
  fileMessage:
    post:
      tags:
        - 消息相关事件
      summary: 文件消息
      requestBody:
        $ref: '#/components/requestBodies/file'
  kmarkdownMessage:
    post:
      tags:
        - 消息相关事件
      summary: KMarkDown消息
      requestBody:
        $ref: '#/components/requestBodies/kmarkdown'
  cardMessage:
    post:
      tags:
        - 消息相关事件
      summary: 卡片消息
      requestBody:
        $ref: '#/components/requestBodies/card'
  userAddReaction:
    post:
      tags:
        - 频道相关事件
      summary: 用户添加reaction
      requestBody:
        $ref: '#/components/requestBodies/add'
  userDeleteReaction:
    post:
      tags:
        - 频道相关事件
      summary: 频道内用户取消reaction
      requestBody:
        $ref: '#/components/requestBodies/delete'
  updateMessge:
    post:
      tags:
        - 频道相关事件
        - 消息相关事件
      summary: 频道消息更新
      requestBody:
        $ref: '#/components/requestBodies/update'
  deleteMessage:
    post:
      tags:
        - 频道相关事件
        - 消息相关事件
      summary: 频道消息被删除
      requestBody:
        $ref: '#/components/requestBodies/message_delete'
  createChannel:
    post:
      tags:
        - 频道相关事件
      summary: 新增频道
      requestBody:
        $ref: '#/components/requestBodies/create'
  updateChannel:
    post:
      tags:
        - 频道相关事件
      summary: 频道信息更新
      requestBody:
        $ref: '#/components/requestBodies/channel_update'
  deleteChannel:
    post:
      tags:
        - 频道相关事件
      summary: 删除频道
      requestBody:
        $ref: '#/components/requestBodies/channel_delete'
  pinMessage:
    post:
      tags:
        - 频道相关事件
      summary: 新的频道置顶消息
      requestBody:
        $ref: '#/components/requestBodies/pin_add'
  unpinMessage:
    post:
      tags:
        - 频道相关事件
      summary: 取消频道置顶消息
      requestBody:
        $ref: '#/components/requestBodies/cancel'
  updatePrivateMessage:
    post:
      tags:
        - 私聊相关事件
      summary: 私聊消息更新
      requestBody:
        $ref: '#/components/requestBodies/message_update'
  deletePrivateMessage:
    post:
      tags:
        - 私聊相关事件
      summary: 私聊消息被删除
      requestBody:
        $ref: '#/components/requestBodies/message_delete-2'
  privateAddReaction:
    post:
      tags:
        - 私聊相关事件
      summary: 私聊内用户添加reaction
      requestBody:
        $ref: '#/components/requestBodies/reaction_add'
  privateDeleteReaction:
    post:
      tags:
        - 私聊相关事件
      summary: 私聊内用户删除reaction
      requestBody:
        $ref: '#/components/requestBodies/reaction_delete'
  memberJoin:
    post:
      tags:
        - 服务器成员相关事件
      summary: 新成员加入服务器
      requestBody:
        $ref: '#/components/requestBodies/join'
  memberExit:
    post:
      tags:
        - 服务器成员相关事件
      summary: 服务器成员退出
      requestBody:
        $ref: '#/components/requestBodies/exit'
  memberUpdate:
    post:
      tags:
        - 服务器成员相关事件
      summary: 服务器成员信息更新
      requestBody:
        $ref: '#/components/requestBodies/member_update'
  memberOnline:
    post:
      tags:
        - 服务器成员相关事件
      summary: 服务器成员信息上线
      requestBody:
        $ref: '#/components/requestBodies/online'
  memberOffline:
    post:
      tags:
        - 服务器成员相关事件
      summary: 服务器成员信息下线
      requestBody:
        $ref: '#/components/requestBodies/offline'
  roleAdd:
    post:
      tags:
        - 服务器角色相关事件
      summary: 服务器角色增加
      requestBody:
        $ref: '#/components/requestBodies/role_add'
  roleUpdate:
    post:
      tags:
        - 服务器角色相关事件
      summary: 服务器角色更新
      requestBody:
        $ref: '#/components/requestBodies/role_update'
  roleDelete:
    post:
      tags:
        - 服务器角色相关事件
      summary: 服务器角色删除
      requestBody:
        $ref: '#/components/requestBodies/role_delete'
  guildUpdate:
    post:
      tags:
        - 服务器相关事件
      summary: 服务器信息更新
      requestBody:
        $ref: '#/components/requestBodies/guild_update'
  guildDelete:
    post:
      tags:
        - 服务器相关事件
      summary: 服务器删除
      requestBody:
        $ref: '#/components/requestBodies/guild_delete'
  guildBanUser:
    post:
      tags:
        - 服务器相关事件
      summary: 服务器封禁用户
      requestBody:
        $ref: '#/components/requestBodies/ban'
  guildUnbanUser:
    post:
      tags:
        - 服务器相关事件
      summary: 服务器解除封禁用户
      requestBody:
        $ref: '#/components/requestBodies/unban'
  userJoinChannel:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 用户加入语音频道
      requestBody:
        $ref: '#/components/requestBodies/channel_join'
  userExitChannel:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 用户加入语音频道
      requestBody:
        $ref: '#/components/requestBodies/channel_exit'
  userJoinGuild:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 用户加入语音频道
      description: |
        当自己被邀请或主动加入新的服务器时, 产生该事件（对于机器人来说，就是机器人被邀请进入新服务器）
      requestBody:
        $ref: '#/components/requestBodies/guild_join'
  userExitGuild:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 用户加入语音频道
      description: |
        当自己被踢出服务器或被拉黑或主动退出服务器时, 产生该事件（对于机器人来说，就是机器人被踢出/拉黑/主动退出新服务器）
      requestBody:
        $ref: '#/components/requestBodies/guild_exit'
  userUpdateInfo:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 用户加入语音频道
      description: |
        **该事件与服务器无关, 遵循以下条件**
        - 仅当用户的 **用户名** 或 **头像** 变更时;
        - 仅通知与该用户存在关联的用户或Bot: a. 存在聊天会话 b. 双方好友关系
      requestBody:
        $ref: '#/components/requestBodies/info_update'
  userClickButton:
    post:
      tags:
        - 用户相关事件
        - 消息相关事件
      summary: 用户点击按钮（Card Message）
      requestBody:
        $ref: '#/components/requestBodies/click-button'
components:
  parameters:
    PageNumberParam:
      name: page
      in: query
      description: 目标页数
      schema:
        type: integer
    PageSizeParam:
      name: page_size
      in: query
      description: 每页数据数量
      schema:
        type: integer
    GuildIdParam:
      name: guild_id
      in: query
      description: 服务器id
      required: true
      schema:
        $ref: '#/components/schemas/GuildId'
    GuildChannelIdParam:
      name: channel_id
      in: query
      description: 频道id
      schema:
        $ref: '#/components/schemas/GuildChannelId'
    MobileVerifiedParam:
      name: mobile_verified
      in: query
      description: 只能为`0`或`1`，`0`是未认证，`1`是已认证
      schema:
        type: integer
        enum:
          - 0
          - 1
    GuildChannelTypeParam:
      name: type
      in: query
      description: '频道类型, `1`为文字，`2`为语音, 默认为`1`'
      schema:
        $ref: '#/components/schemas/GuildChannelType'
    MessageListFlagParam:
      name: flag
      in: query
      description: |-
        查询模式，有三种模式可以选择。不传则默认查询最新的消息。  
        before: 查询参考消息之前的消息，不包括参考消息  
        around: 查询以参考消息为中心，前后一定数量的消息  
        after: 查询参考消息之后的消息，不包括参考消息
      schema:
        type: string
        enum:
          - before
          - around
          - after
    UserIdParam:
      name: user_id
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/id'
  schemas:
    BasicResponse:
      type: object
      required:
        - message
        - code
      properties:
        code:
          type: integer
          description: 错误码，0代表成功，非0代表失败，具体的错误码参见错误码一览
          example: 0
        message:
          type: string
          description: 错误消息，具体的返回消息会根据Accept-Language来返回。
          example: 操作成功
        data:
          type: object
          description: 返回数据
    PaginationInfo:
      type: object
      properties:
        items:
          type: array
          description: 数据列表
          items:
            type: object
        meta:
          type: object
          description: 分页信息
          properties:
            page:
              type: integer
              description: 页码
              example: 1
            page_total:
              type: integer
              description: 总页数
              example: 10
            page_size:
              type: integer
              description: 每一页的数据
              example: 50
            total:
              type: integer
              description: 总数据量
              example: 480
        sort:
          type: object
          description: 'Map。分页的排序, key:+-1, 如果为1代表按key升序，如果为-1代表按key降序'
          example:
            id: 1
    GuildId:
      type: string
      description: 服务器id
      example: '91686000000'
    Guild:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GuildId'
        name:
          type: string
          description: 服务器名称
          example: Hello
        topic:
          type: string
          description: 服务器主题
        master_id:
          type: string
          description: 服务器主的id
          example: '17000000'
        icon:
          type: string
          description: 服务器icon的地址
          example: 'https://xxx/icons/2020-05/YQyfHxxx.png/icon'
        notify_type:
          type: integer
          description: '通知类型, `0`代表默认使用服务器通知设置，`1`代表接收所有通知, `2`代表仅@被提及，`3`代表不接收通知'
          enum:
            - 0
            - 1
            - 2
            - 3
        region:
          type: string
          description: 服务器默认使用语音区域
        enable_open:
          type: boolean
          description: 是否为公开服务器
        open_id:
          type: string
          description: 公开服务器id
        default_channel_id:
          type: string
          description: 默认频道id
        welcome_channel_id:
          type: string
          description: 欢迎频道id
      example:
        id: '123123'
        name: test server
        topic: ''
        master_id: ''
        icon: ''
        notify_type: 0
        region: beijing
    GuildChannelId:
      type: string
      description: 服务器频道ID
      example: '9219038000000'
    id:
      type: string
      description: 用户id
      example: '2418200000'
    basic:
      type: object
      description: 用户对象
      properties:
        id:
          $ref: '#/components/schemas/id'
        username:
          type: string
          description: 用户的名称
          example: tz-un
        identify_num:
          type: string
          description: 用户名的认证数字，用户名正常为：user_name#identify_num
          example: '5618'
        online:
          type: boolean
          description: 当前是否在线
          example: false
        status:
          type: integer
          description: '用户的状态, 0代表正常，10代表被封禁'
          enum:
            - 0
            - 10
          example: 0
        bot:
          type: boolean
          description: 是否为机器人
        avatar:
          type: string
          description: 用户的头像的url地址
          example: 'https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon'
        vip_avatar:
          type: string
          description: vip用户的头像的url地址，可能为gif动图
          example: 'https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon'
    GuildChannelType:
      type: integer
      enum:
        - 1
        - 2
      description: 频道类型，`1`为文字频道，`2`为语音频道
    GuildChannel:
      type: object
      description: 服务器频道
      properties:
        id:
          $ref: '#/components/schemas/GuildChannelId'
        guild_id:
          $ref: '#/components/schemas/GuildId'
        master_id:
          description: 频道创建者id
          type: string
        parent_id:
          type: string
          description: 父分组频道id
        name:
          type: string
          description: 频道名称
        topic:
          type: string
          description: 频道简介
        type:
          $ref: '#/components/schemas/GuildChannelType'
        level:
          type: integer
          description: 频道排序
        slow_mode:
          type: integer
          description: 慢速限制，单位秒。用户发送消息之后再次发送消息的等待时间。
        limit_amount:
          type: integer
          description: 人数限制
        is_category:
          type: boolean
          description: 是否为分组类型
        server_url:
          type: string
          description: '语音服务器地址，`HOST:PORT`的格式'
      example:
        id: 123
        guild_id: 123
        master_id: 123
        parent_id: 123
        name: 测试频道
        topic: 频道简介
        type: 1
        level: 10
        slow_mode: 0
        is_category: false
    GuildChannelPermission:
      type: object
      required:
        - allow
        - deny
      properties:
        allow:
          type: integer
          description: >-
            允许的权限的结果集，详见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)
          example: 2048
        deny:
          type: integer
          description: >-
            拒绝的权限的结果集，详见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)
          example: 0
    GuildChannelRoleRequest:
      type: object
      required:
        - channel_id
      properties:
        channel_id:
          description: '频道id, 如果频道是分组的id,会同步给所有sync=1的子频道'
          allOf:
            - $ref: '#/components/schemas/GuildChannelId'
        type:
          type: string
          description: 'value的类型，只能为"role_id","user_id",不传则默认为"user_id"'
          enum:
            - role_id
            - user_id
          default: user_id
        value:
          type: string
          description: 根据type，为用户id或频道id
          default: ''
    GuildRoleId:
      type: number
      description: 服务器角色id
      example: 113
    _fields_id:
      type: string
      description: 消息id
      example: 1c4532f6-*********-93e9-6347f410f91c
    type:
      type: integer
      description: '消息类型, 1:文字消息, 2:图片消息，3:视频消息，4:文件消息， 8:音频消息，9:KMarkdown，10:card消息'
    author:
      description: 消息作者
      allOf:
        - $ref: '#/components/schemas/basic'
    content:
      type: string
      description: 消息内容
    mention:
      type: array
      description: '`@特定用户` 的用户ID数组'
      items:
        type: string
    mention_all:
      type: boolean
      description: 是否含有`@全体人员`
    mention_roles:
      type: array
      description: '`@特定角色` 的角色ID数组'
      items:
        type: string
    mention_here:
      type: boolean
      description: 是否含有`@在线成员`
    embed:
      type: object
      properties:
        type:
          type: string
        url:
          type: string
      additionalProperties: true
      example:
        type: bili-video
        url: ''
        origin_url: 'https://www.bilibili.com/video/XXXXX'
        av_no: 11J411E
        iframe_path: 'https://player.bilibili.com/player.html?xxx=xxx'
        duration: 97
        title: Title
        pic: 'https://**/lc01gi.jpg'
    embeds:
      type: array
      description: 超链接解析数据
      items:
        $ref: '#/components/schemas/embed'
    image:
      type: object
      properties:
        type:
          type: string
          enum:
            - image
        name:
          type: string
          description: 多媒体名
          example: xxx.jpg
        url:
          type: string
          description: 附件链接
          example: 'https://img.kaiheila.cn/assets/2020-12/IHT5xxxxxA07o03m.jpg'
    video:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
        name:
          description: 多媒体名
          example: 002iQMhagx07Fx0S4xxxx323o0E010.mp4
        url:
          description: 附件链接
          example: 'https://img.kaiheila.cn/attachments/2020-12/11/asd.mp4'
        file_type:
          description: 文件格式
          example: video/mp4
        size:
          type: integer
          description: 大小 单位（B）
          example: 722882
        duration:
          type: number
          description: 视频时长（s）
          example: 15.673
        width:
          type: integer
          description: 视频宽度
          example: 640
        height:
          type: integer
          description: 视频高度
          example: 480
    file:
      type: object
      properties:
        type:
          type: string
          enum:
            - file
        url:
          type: string
          example: 'https://img.kaiheila.cn/attachments/2020-12/11/asd.txt'
        name:
          type: string
          description: 多媒体名
        size:
          type: integer
          description: 大小 单位（B）
          example: 2575670
    attachments:
      oneOf:
        - $ref: '#/components/schemas/image'
        - $ref: '#/components/schemas/video'
        - $ref: '#/components/schemas/file'
    reaction:
      type: object
      properties:
        emoji:
          type: object
          properties:
            id:
              type: string
              example: '[#129315;]'
            name:
              type: string
              example: '[#129315;]'
        count:
          type: integer
        me:
          type: boolean
    reactions:
      type: array
      items:
        $ref: '#/components/schemas/reaction'
    mention_part:
      type: object
      properties:
        id:
          type: string
          example: 28444
        username:
          type: string
          example: example
        full_name:
          type: string
          example: example#1111
        avatar:
          type: string
          example: '***.jpg'
    GuildRole:
      type: object
      properties:
        role_id:
          type: integer
          format: unsigned integer
          description: 角色id
          example: 702
        name:
          type: string
          description: 角色名称
          example: 管理员
        color:
          type: integer
          format: unsigned integer
          minimum: 0
          maximum: 16777215
          description: 颜色
          example: 0
        position:
          type: integer
          format: unsigned integer
          description: 顺序，值越小载靠前
          example: 1
        hoist:
          type: integer
          format: unsigned integer
          description: 只能为0或者1，是否把该角色的用户在用户列表排到前面
          enum:
            - 0
            - 1
        mentionable:
          type: integer
          format: unsigned integer
          description: 只能为0或者1，该角色是否可以被提及
          enum:
            - 0
            - 1
        permissions:
          type: integer
          format: unsigned integer
          description: >-
            允许的权限，参见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)
          example: 2048
    mention_info:
      type: object
      properties:
        mention_part:
          description: '`@特定用户` 的用户ID信息，与`mention`中数据对应'
          type: array
          items:
            $ref: '#/components/schemas/mention_part'
        mention_role_part:
          type: array
          description: '`@特定角色` 的角色ID信息，与`mention_roles`中数据对应'
          items:
            $ref: '#/components/schemas/GuildRole'
    _index_basic:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/_fields_id'
        type:
          $ref: '#/components/schemas/type'
        author:
          $ref: '#/components/schemas/author'
        content:
          $ref: '#/components/schemas/content'
        mention:
          $ref: '#/components/schemas/mention'
        mention_all:
          $ref: '#/components/schemas/mention_all'
        mention_roles:
          $ref: '#/components/schemas/mention_roles'
        mention_here:
          $ref: '#/components/schemas/mention_here'
        embeds:
          $ref: '#/components/schemas/embeds'
        attachments:
          $ref: '#/components/schemas/attachments'
        reactions:
          $ref: '#/components/schemas/reactions'
        quote:
          $ref: '#/components/schemas/reactions'
        mention_info:
          $ref: '#/components/schemas/mention_info'
    SendMessageRequest:
      type: object
      required:
        - content
      properties:
        type:
          type: integer
          description: >-
            消息类型, 见[type], 不传默认为`1`, 代表文本类型。`2`图片消息，`3`视频消息，`4`文件消息，`9`代表
            kmarkdown 消息, `10`代表卡片消息。
          example: 9
          default: 1
        content:
          type: string
          description: 消息内容
        quote:
          allOf:
            - $ref: '#/components/schemas/_fields_id'
          description: 回复某条消息的`msg_id`
        nonce:
          type: string
          description: 'nonce, 服务端不做处理, 原样返回'
    GuildEmojiId:
      type: string
      description: 表情的 ID
      example: XXXXXXXXX/4c43XXXXXXX
    UserChat:
      type: object
      properties:
        code:
          type: string
          description: 私信会话 Code
          example: sderwrw**
        last_read_time:
          type: integer
          description: 上次阅读消息的时间 (毫秒)
          example: 1612696873000
        latest_msg_time:
          type: integer
          description: 最新消息时间 (毫秒)
          example: null
        unread_count:
          type: integer
          description: 未读消息数
        target_info:
          type: object
          description: 目标用户信息
          properties:
            id:
              $ref: '#/components/schemas/id'
            username:
              type: string
              description: 目标用户名
              example: 工具
            online:
              type: boolean
              description: 是否在线
              example: false
            avatar:
              type: string
              description: 头像图片链接
              example: 'https://***.jpg'
    UserChatDetail:
      allOf:
        - $ref: '#/components/schemas/UserChat'
        - type: object
          properties:
            is_friend:
              type: boolean
              description: 是否是好友
            is_blocked:
              type: boolean
              description: 是否已屏蔽对方
            is_target_blocked:
              type: boolean
              description: 是否已被对方屏蔽
    quote:
      type: object
      properties:
        id:
          type: string
          description: 引用消息id
          example: 1c4532f6-*********-93e9-6347f410f91c
        type:
          type: integer
          description: 引用消息类型
          example: 1
        content:
          type: string
          description: 引用消息内容
          example: hello world
        create_at:
          type: integer
          description: 引用消息创建时间（毫秒）
          example: 1628069285358
        author:
          description: 作者的用户信息
          allOf:
            - $ref: '#/components/schemas/basic'
    DirectMessage:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/_fields_id'
        type:
          type: integer
          description: 消息类型
        author_id:
          description: 作者的用户ID
          allOf:
            - $ref: '#/components/schemas/id'
        content:
          type: string
          description: 消息内容
        embeds:
          $ref: '#/components/schemas/embeds'
        attachments:
          type: object
        reactions:
          $ref: '#/components/schemas/reactions'
        quote:
          $ref: '#/components/schemas/quote'
        read_status:
          type: boolean
          description: 是否已读
    GuildEmoji:
      type: object
      properties:
        name:
          type: string
          description: 表情的名称
          example: 摇滚啊
        id:
          $ref: '#/components/schemas/GuildEmojiId'
        user_info:
          description: 上传用户
          allOf:
            - $ref: '#/components/schemas/basic'
    BasicEvent:
      type: object
      required:
        - s
        - d
        - sn
      properties:
        s:
          type: integer
          description: >-
            websocket信令，详见[开黑啦websocket说明](https://developer.kaiheila.cn/doc/websocket)
          example: 0
        d:
          type: object
          description: 具体数据
          properties:
            channel_type:
              type: string
              description: >-
                消息频道类型, 群体消息为`GROUP`，个人消息为`PERSON`。例如，向频道内发送的消息为`GROUP`,
                按钮返回事件为`PERSON`
              example: GROUP
              enum:
                - GROUP
                - PERSON
            type:
              type: integer
            target_id:
              type: string
              description: 发送目的 id，如果为是 GROUP 消息，则 target_id 代表频道 id
              example: '60163899100000'
            author_id:
              type: string
              description: '发送者 id, 1 代表系统'
            content:
              type: string
              description: '消息内容, 文件，图片，视频时，content 为 url'
            msg_id:
              type: string
              description: 消息的 id
            msg_timestamp:
              type: integer
              description: 消息发送时间的毫秒时间戳
            nonce:
              type: string
              description: 随机串，与用户消息发送 api 中传的 nonce 保持一致
            verify_token:
              type: string
              description: webhook设置中的verify_token
            extra:
              type: object
              description: 不同的消息类型，结构不一致
              example: xxx
          example: {}
        sn:
          type: integer
          description: >-
            消息序号，针对当前session。该字段并不一定有，只在s=0时有，与webhook一致。详见[开黑啦websocket说明](https://developer.kaiheila.cn/doc/websocket)
          example: 1
    MessageEvent:
      type: object
      description: 当事件的type非系统消息(255)时
      allOf:
        - $ref: '#/components/schemas/BasicEvent'
        - type: object
          properties:
            d:
              type: object
              properties:
                author_id:
                  description: 发送者的用户id
                  example: '2418200000'
                extra:
                  type: object
                  properties:
                    type:
                      type: integer
                      description: >-
                        1:文字消息, 2:图片消息，3:视频消息，4:文件消息，
                        8:音频消息，9:KMarkdown，10:card消息
                    guild_id:
                      type: string
                      description: 服务器id
                    channel_name:
                      type: string
                      description: 频道名
                    mention:
                      type: array
                      description: '`\@特定用户` 的用户ID数组，与`mention_info`中的数据对应'
                      items:
                        type: string
                    mention_all:
                      type: boolean
                      description: 是否含有`@全体人员`
                    mention_roles:
                      type: array
                      description: '`@特定角色` 的角色ID数组，与`mention_info`中的数据对应'
                      items:
                        type: string
                    mention_here:
                      type: boolean
                    author:
                      description: 消息作者
                      allOf:
                        - $ref: '#/components/schemas/basic'
    text:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    type:
                      allOf:
                        - $ref: '#/components/schemas/type'
                      example: 1
                    guild_id:
                      $ref: '#/components/schemas/GuildId'
                    channel_name:
                      type: string
                      description: 频道名
                      example: 一个频道
                    mention:
                      $ref: '#/components/schemas/mention'
                    mention_all:
                      $ref: '#/components/schemas/mention_all'
                    mention_roles:
                      $ref: '#/components/schemas/mention_roles'
                    mention_here:
                      $ref: '#/components/schemas/mention_here'
                    author:
                      $ref: '#/components/schemas/basic'
    multimedia_image:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 2
        guild_id:
          $ref: '#/components/schemas/GuildId'
        author:
          $ref: '#/components/schemas/basic'
        attachments:
          $ref: '#/components/schemas/image'
    multimedia_video:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 3
        guild_id:
          $ref: '#/components/schemas/GuildId'
        author:
          $ref: '#/components/schemas/basic'
        attachments:
          $ref: '#/components/schemas/video'
    multimedia_file:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 4
        guild_id:
          $ref: '#/components/schemas/GuildId'
        author:
          $ref: '#/components/schemas/basic'
        attachments:
          $ref: '#/components/schemas/file'
    kmarkdownElement:
      allOf:
        - $ref: '#/components/schemas/mention_info'
        - type: object
          properties:
            raw_content:
              type: string
              description: '经过编译的纯文本，如原始文本为"*Hello World*", 则此处为"Hello World"'
    kmarkdown:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 9
        guild_id:
          $ref: '#/components/schemas/GuildId'
        channel_name:
          type: string
          description: 频道名
          example: 一个频道
        mention:
          $ref: '#/components/schemas/mention'
        mention_all:
          $ref: '#/components/schemas/mention_all'
        mention_roles:
          $ref: '#/components/schemas/mention_roles'
        mention_here:
          $ref: '#/components/schemas/mention_here'
        author:
          $ref: '#/components/schemas/basic'
        kmarkdown:
          $ref: '#/components/schemas/kmarkdownElement'
    card:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 9
        guild_id:
          $ref: '#/components/schemas/GuildId'
        channel_name:
          type: string
          description: 频道名
          example: 一个频道
        mention:
          $ref: '#/components/schemas/mention'
        mention_all:
          $ref: '#/components/schemas/mention_all'
        mention_roles:
          $ref: '#/components/schemas/mention_roles'
        mention_here:
          $ref: '#/components/schemas/mention_here'
        author:
          $ref: '#/components/schemas/basic'
    SystemEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicEvent'
        - type: object
          properties:
            d:
              type: object
              properties:
                channel_type:
                  example: GROUP
                type:
                  description: 消息类型，系统消息为255
                  example: 255
                author_id:
                  description: '发送者id, 1 代表系统'
                  example: 1
                content:
                  example: '[系统消息]'
                extra:
                  type: object
                  properties:
                    type:
                      type: string
                    body:
                      type: object
                msg_id:
                  example: 63d6a934-xxxx-a1f02c255213
                msg_timestamp:
                  example: 1612704007683
                nonce:
                  example: ''
                verify_token:
                  example: xxx
    reaction-2:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    channel_id:
                      allOf:
                        - $ref: '#/components/schemas/GuildChannelId'
                        - description: 消息所在的频道id
                    emoji:
                      type: object
                      properties:
                        name:
                          type: string
                          description: 表情的名称
                          example: 摇滚啊
                        id:
                          $ref: '#/components/schemas/GuildEmojiId'
                    user_id:
                      allOf:
                        - $ref: '#/components/schemas/id'
                        - description: 点击的用户
                    msg_id:
                      allOf:
                        - $ref: '#/components/schemas/_fields_id'
                        - description: 用户点击的消息id
    message:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    msg_id:
                      allOf:
                        - $ref: '#/components/schemas/_fields_id'
                      description: 消息id
                    channel_id:
                      allOf:
                        - $ref: '#/components/schemas/GuildChannelId'
                      description: 消息所在的频道id
                    content:
                      type: string
                      description: 消息内容
                    mention:
                      type: array
                      description: '`\@特定用户` 的用户ID数组，与`mention_info`中的数据对应'
                      items:
                        type: string
                    mention_all:
                      type: boolean
                      description: 是否含有`@全体人员`
                    mention_roles:
                      type: array
                      description: '`@特定角色` 的角色ID数组，与`mention_info`中的数据对应'
                      items:
                        type: string
                    mention_here:
                      type: boolean
    pin:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    channel_id:
                      allOf:
                        - $ref: '#/components/schemas/GuildChannelId'
                      description: 发生操作的频道id
                    operator_id:
                      allOf:
                        - $ref: '#/components/schemas/id'
                      description: 操作人的用户id
                    msg_id:
                      allOf:
                        - $ref: '#/components/schemas/_fields_id'
                      description: 被操作的消息id
    ChatCode:
      type: string
      description: 私聊会话 Code
      example: 3b4aa448b8xxxxc87a1b3770792e7433
    PersonEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/SystemEvent'
        - type: object
          properties:
            d:
              type: object
              properties:
                channel_type:
                  type: string
                  description: 频道类型，私聊消息为`PERSON`
                  example: PERSON
                extra:
                  type: object
                  properties:
                    body:
                      type: object
                      properties:
                        msg_id:
                          allOf:
                            - $ref: '#/components/schemas/_fields_id'
                          description: 被操作的消息id
                        chat_code:
                          $ref: '#/components/schemas/ChatCode'
    member:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    user_id:
                      allOf:
                        - $ref: '#/components/schemas/id'
                      description: 用户id
    guild:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    id:
                      type: string
                      description: 服务器id
                    name:
                      type: string
                      description: 服务器主id
                    icon:
                      type: string
                      description: 服务器icon的地址
                      example: 'https://xxx/icons/2020-05/YQyfHxxx.png/icon'
                    notify_type:
                      type: integer
                      description: >-
                        通知类型, `0`代表默认使用服务器通知设置，`1`代表接收所有通知,
                        `2`代表仅@被提及，`3`代表不接收通知
                      enum:
                        - 0
                        - 1
                        - 2
                        - 3
                    region:
                      type: string
                      description: 服务器默认使用语音区域
                    enable_open:
                      type: boolean
                      description: 是否为公开服务器
                    open_id:
                      type: string
                      description: 公开服务器id
                    default_channel_id:
                      type: string
                      description: 默认频道id
                    welcome_channel_id:
                      type: string
                      description: 欢迎频道id
    User:
      $ref: '#/components/schemas/basic'
    UserId:
      $ref: '#/components/schemas/id'
    Message:
      $ref: '#/components/schemas/_index_basic'
  requestBodies:
    text:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            example: 1
                          body:
                            $ref: '#/components/schemas/text'
    image:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      content:
                        description: 文件链接，与`attachments`的`url`相同
                        example: >-
                          https://img.kaiheila.cn/assets/2020-12/IHT5xxxxxA07o03m.jpg
                      extra:
                        type: object
                        properties:
                          type:
                            example: 2
                          body:
                            $ref: '#/components/schemas/multimedia_image'
    video:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      content:
                        description: 文件链接，与`attachments`的`url`相同
                        example: 'https://img.kaiheila.cn/attachments/2020-12/11/asd.mp4'
                      extra:
                        type: object
                        properties:
                          type:
                            example: 3
                          body:
                            $ref: '#/components/schemas/multimedia_video'
    file:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      content:
                        description: 文件链接，与`attachments`的`url`相同
                        example: 'https://img.kaiheila.cn/attachments/2020-12/11/asd.txt'
                      extra:
                        type: object
                        properties:
                          type:
                            example: 4
                          body:
                            $ref: '#/components/schemas/multimedia_file'
    kmarkdown:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            example: 9
                          body:
                            $ref: '#/components/schemas/kmarkdown'
    card:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            example: 10
                          body:
                            $ref: '#/components/schemas/card'
    add:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/reaction-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`added_reaction`
                            example: added_reaction
    delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/reaction-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_reaction`
                            example: deleted_reaction
    update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/message'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_message`
                            example: updated_message
                          body:
                            type: object
                            properties:
                              udpated_at:
                                type: integer
                                description: 更新时间戳(毫秒)
                                example: 1612703810779
    message_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_message`
                            example: updated_message
                          body:
                            type: object
                            properties:
                              msg_id:
                                allOf:
                                  - $ref: '#/components/schemas/_fields_id'
                                description: 被删除的消息id
                              channel_id:
                                allOf:
                                  - $ref: '#/components/schemas/GuildChannelId'
                                description: 消息所在频道id
    create:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`added_channel`
                            example: added_channel
                          body:
                            $ref: '#/components/schemas/GuildChannel'
    channel_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_channel`
                            example: updated_channel
                          body:
                            $ref: '#/components/schemas/GuildChannel'
    channel_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_channel`
                            example: deleted_channel
                          body:
                            type: object
                            properties:
                              id:
                                allOf:
                                  - $ref: '#/components/schemas/GuildChannelId'
                                description: 被删除的频道id
                              deleted_at:
                                type: integer
                                description: 删除操作的时间戳(毫秒)
                                example: 1612777405595
    pin_add:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/pin'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`pinned_message`
                            example: pinned_message
    cancel:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/pin'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`unpinned_message`
                            example: unpinned_message
    message_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PersonEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      channel_type:
                        type: string
                        description: 频道类型，私聊消息为`PERSON`
                        example: PERSON
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_private_message`
                            example: updated_private_message
                          body:
                            type: object
                            properties:
                              msg_id:
                                allOf:
                                  - $ref: '#/components/schemas/_fields_id'
                                description: 被更新的消息id
                              author_id:
                                allOf:
                                  - $ref: '#/components/schemas/id'
                                description: 被更新的消息的创建者id
                              target_id:
                                allOf:
                                  - $ref: '#/components/schemas/id'
                                description: 被更新的消息的目标用户id
                              content:
                                type: string
                                description: 更新后的文本
                                example: asdaaad
                              updated_at:
                                type: integer
                                description: 更新时间戳(毫秒)
                                example: 1612778254192
    message_delete-2:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PersonEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_private_message`
                            example: deleted_private_message
                          body:
                            type: object
                            properties:
                              msg_id:
                                allOf:
                                  - $ref: '#/components/schemas/_fields_id'
                                description: 被删除的消息id
                              author_id:
                                allOf:
                                  - $ref: '#/components/schemas/id'
                                description: 被删除的消息的创建者id
                              target_id:
                                allOf:
                                  - $ref: '#/components/schemas/id'
                                description: 被删除的消息的目标用户id
                              updated_at:
                                type: integer
                                description: 删除的时间戳(毫秒)
                                example: 1612778254192
    reaction_add:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PersonEvent'
              - $ref: '#/components/schemas/reaction-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`private_added_reaction`
                            example: private_added_reaction
    reaction_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PersonEvent'
              - $ref: '#/components/schemas/reaction-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`private_deleted_reaction`
                            example: private_deleted_reaction
    join:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`joined_guild`
                            example: joined_guild
                          body:
                            type: object
                            properties:
                              joined_at:
                                type: integer
                                description: 加入服务器的时间(毫秒)
                                example: 1612774315000
    exit:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`exited_guild`
                            example: exited_guild
                          body:
                            type: object
                            properties:
                              exited_at:
                                type: integer
                                description: 退出服务器的时间(毫秒)
                                example: 1612774315000
    member_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_guild_member`
                            example: updated_guild_member
                          body:
                            type: object
                            properties:
                              nickname:
                                type: string
                                description: 昵称
                                example: 新昵称
    online:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`guild_member_online`
                            example: guild_member_online
                          body:
                            type: object
                            properties:
                              event_time:
                                type: integer
                                description: 用户上线时间(毫秒)
                                example: 1612774315000
                              guilds:
                                type: array
                                description: '服务器id组成的数组, 代表与该用户所在的共同的服务器'
                                items:
                                  type: string
                                example:
                                  - '601638990000000'
    offline:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`guild_member_offline`
                            example: guild_member_offline
                          body:
                            type: object
                            properties:
                              event_time:
                                type: integer
                                description: 用户下线时间(毫秒)
                                example: 1612774315000
                              guilds:
                                type: array
                                description: '服务器id组成的数组, 代表与该用户所在的共同的服务器'
                                items:
                                  type: string
                                example:
                                  - '601638990000000'
    role_add:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`joined_guild`
                            example: joined_guild
                          body:
                            $ref: '#/components/schemas/GuildRole'
    role_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_role`
                            example: updated_role
                          body:
                            $ref: '#/components/schemas/GuildRole'
    role_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_role`
                            example: deleted_role
                          body:
                            $ref: '#/components/schemas/GuildRole'
    guild_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/guild'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_guild`
                            example: updated_guild
    guild_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/guild'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_guild`
                            example: deleted_guild
    ban:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`added_block_list`
                            example: added_block_list
                          body:
                            type: object
                            properties:
                              operator_id:
                                allOf:
                                  - $ref: '#/components/schemas/id'
                                description: 操作人id
                              user_id:
                                type: array
                                description: 被封禁成员id列表
                                items:
                                  $ref: '#/components/schemas/id'
                              remark:
                                type: string
                                description: 封禁理由
                                example: 频繁发广告
    unban:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`added_block_list`
                            example: added_block_list
                          body:
                            type: object
                            properties:
                              operator_id:
                                allOf:
                                  - $ref: '#/components/schemas/id'
                                description: 操作人id
                              user_id:
                                type: array
                                description: 被封禁成员id列表
                                items:
                                  $ref: '#/components/schemas/id'
    channel_join:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`joined_channel`
                            example: joined_channel
                          body:
                            type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/id'
                              channel_id:
                                allOf:
                                  - $ref: '#/components/schemas/GuildChannelId'
                                description: 加入的频道id
                              joined_at:
                                type: integer
                                description: 加入的时间（ms)
                                example: 1612790368279
    channel_exit:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`exited_channel`
                            example: exited_channel
                          body:
                            type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/id'
                              channel_id:
                                allOf:
                                  - $ref: '#/components/schemas/GuildChannelId'
                                description: 加入的频道id
                              exited_at:
                                type: integer
                                description: 退出的时间（ms)
                                example: 1612790411267
    guild_join:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          channel_type:
                            example: PERSON
                          type:
                            description: 消息类型，此处为`self_joined_guild`
                            example: self_joined_guild
                          body:
                            type: object
                            properties:
                              guild_id:
                                $ref: '#/components/schemas/GuildId'
    guild_exit:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          channel_type:
                            example: PERSON
                          type:
                            description: 消息类型，此处为`self_exited_guild`
                            example: self_exited_guild
                          body:
                            type: object
                            properties:
                              guild_id:
                                $ref: '#/components/schemas/GuildId'
    info_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`user_updated`
                            example: user_updated
                          body:
                            type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/id'
                              username:
                                type: string
                                description: 用户名
                                example: 一个新用户名
                              avatar:
                                type: string
                                description: 头像地址
                                example: >-
                                  https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon
    click-button:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`user_updated`
                            example: user_updated
                          body:
                            type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/id'
                              msg_id:
                                $ref: '#/components/schemas/_fields_id'
                              value:
                                type: string
                                description: 按钮`return-val`的返回值
                              target_id:
                                allOf:
                                  - $ref: '#/components/schemas/GuildChannelId'
                                description: 消息所在频道的id
                              guild_id:
                                $ref: '#/components/schemas/GuildId'
                              user_info:
                                $ref: '#/components/schemas/basic'
security: []
